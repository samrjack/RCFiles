#+TITLE: Emacs config file
#+AUTHOR: Samuel Jackson
#+DESCRIPTION: This file defines all my emacs configurations for my doom emacs setup.
#+STARTUP: overview num hidestars indent
#+PROPERTY: header-args :results silent :tangle "../configs/.doom.d/config.el"

* File setup
** Initialization
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

** Packages
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

** Configuration
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Initialization
** Documentation
#+begin_src emacs-lisp :tangle no
;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src

** Start
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
(doom!
;;; Modules to load
#+end_src

** Input
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :input
       chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row
#+end_src

** Completion
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :completion
       (company +childframe); the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life
#+end_src

** UI
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       (ligatures        ; ligatures and symbols to make your code pretty again
        +extra
        +hasklig)
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup            ; tame sudden yet inevitable temporary windows
        +defaults)
       ;; tabs              ; a tab bar for Emacs
       (treemacs +lsp)   ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing
#+end_src

** Editor tools
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent
#+end_src

** Emacs
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :emacs
       (dired            ; making dired pretty [functional]
        +icon)
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
#+end_src

** Terminals
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs
#+end_src

** Checkers
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :checkers
       syntax            ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make
#+end_src

** Tools
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       (docker +lsp)
       editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp
#+end_src

** OS
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience
#+end_src

** Programming Languages
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :lang
       ;;agda              ; types of types of types of types...
       (cc +lsp)         ; C/C++/Obj-C madness
       (clojure +lsp)    ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       (elixir +lsp)     ; erlang done right
       elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       (erlang +lsp)     ; an elegant language for a more civilized age
       ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       (haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       (json +lsp)       ; At least it ain't XML

       (java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp) ; all(hope(abandon(ye(who(enter(here))))))
       ;;(julia +lsp)      ; a better, faster MATLAB
       (kotlin +lsp)     ; a better, slicker Java(Script)
       (latex +lsp       ; writing papers in Emacs has never been so fun
              +latexmk
              +cdlatex
              +fold)
       ;;lean
       ;;factor
       ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       (markdown +grip)  ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +brain       ; organize your plain life in plain text
            +dragndrop
            +gnuplot
            +ipython
            +journal
            +jupyter
            +noter
            +pandoc
            +pomodoro
            +present
            +pretty
            +roam2)
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       rst               ; ReST in peace
       (ruby +rails      ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
             +rvm
             +rbenv
             +lsp)
       (rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       (scala +lsp)      ; java, but good
       scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       (yaml +lsp)       ; JSON, but readable
#+end_src

** Email
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :email
       (mu4e +gmail)
       ;;notmuch
       (wanderlust +gmail)
#+end_src

** App
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :app
       calendar
       irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       twitter           ; twitter client https://twitter.com/vnought
#+end_src

** Config
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
       :config
       ;;literate
       (default +bindings +smartparens)
#+end_src

** End section
#+begin_src emacs-lisp :tangle ../configs/.doom.d/init.el
)
#+end_src

* Configuration
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** Documentation
*** Macro documentation
#+begin_src emacs-lisp :tangle no
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src

*** Packages documentation
#+begin_src emacs-lisp :tangle no
;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

#+end_src

** Personal Identification
#+begin_src emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Samuel Jackson"
      user-mail-address (concat "dsiq3g" "@" "gmail.com"))
#+end_src

** Fonts and language
*** Chinese support
In order for Chinese text to be displayed correctly, some modes needs to be turned on to allow for the unique characteristics of the symbolic language.
#+begin_src emacs-lisp
(defun chinese-text-support ()
  "Turn on modes to support chinese text in the buffer. May cause other text to change characteristics as well."
  (interactive)
  (variable-pitch-mode))
#+end_src

** Basic Emacs settings
*** Fonts
#+begin_src emacs-lisp :tangle no
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

*** Custom settings file
#+begin_src emacs-lisp
(setq custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file) (load custom-file))
#+end_src

*** Theming
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; Themes
(package! dracula-theme)
(package! theme-magic)
#+end_src

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function.
#+begin_src emacs-lisp
(setq doom-theme (if (display-graphic-p)'doom-one 'doom-dracula))
#+end_src

*** Line numbering
#+begin_src emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+end_src

*** Undo
#+begin_src emacs-lisp
;; Let the undo buffer use up to 100Mb
(setq undo-limit 100000000)
#+end_src

*** Windows
#+begin_src emacs-lisp
;; Resize all windows when a new one comes in so they have
;; equal space.
(setq-default window-combination-resize t
;; changes the cursor to be the size of a gliph in the buffer.
              x-stretch-cursor t)

;; (setq-default left-margin-width 1)
;; (set-window-buffer nil (current-buffer))
#+end_src

*** Clipboard
Prevents system clipboard from being accidentally overwritten. Must now write to register "+ to write to system clipboard.
#+begin_src emacs-lisp
;; Some paste related settings.
(setq save-interprogram-paste-before-kill t
      select-enable-clipboard nil)
#+end_src

In order to provide copy and paste functionality directly from the keyboard, I need to capture the inputs and make functions that force the register that corresponds with the clipboard to be used (the + register).

First, I need to set up the wrapper functions. The thing to note is that these are just copies of the underlying function's header but they pass in the register's ascii number. In order to get the ascii number of a character, we simply need to put a '?' before it.
#+begin_src emacs-lisp
(evil-define-operator evil-copy-to-clipboard (beg end &optional type _ handler)
  "Saves the characters in motion into they system clipboard through the '+' register"
  :move-point nil
  :repeat nil
  (interactive "<R><x><y>")
  (evil-yank beg end type ?+ handler))
#+end_src

And here is the paste function.
#+begin_src emacs-lisp
(evil-define-command evil-paste-from-clipboard
  (count &optional _ handler)
  "Pastes the latest yanked text behind point.
The return value is the yanked text."
  :suppress-operator t
  (interactive "*P<x>")
  (evil-paste-before count ?+ handler))
#+end_src

Finally we need to create universal keybindings to these functions so they can be called from anywhere.
#+begin_src emacs-lisp
(map! :desc "Paste from clipboard" :nvieomg "s-v" #'evil-paste-from-clipboard
      :desc "Copy to clipboard"    :nvieomg "s-c" #'evil-copy-to-clipboard)
#+end_src

*** Scrolling
#+begin_src emacs-lisp
;; leave some space at the bottom while scrolling down so the
;; cursor isn't hugging the bottom edge.
(setq scroll-margin 2)
#+end_src

*** Scratch buffer
The scratch buffer is always present as an area to experiment or take a quick note without it needing to be a part of a file. In doom, this scratch buffer has a default mode of Fundamental which is both useless and not something I need for experimentation. In fact, I think it's meant for just writing text and notes. I want the scratch buffer to be a place to write some elisp code so I can set things on a whim while working in other non-elisp buffers.
#+begin_src emacs-lisp
(setq initial-major-mode 'emacs-lisp-mode)

(setq initial-scratch-message "\
;; Welcome to the scratch buffer.

")
#+end_src

*** Directory navigation
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; directory management
(package! dired-sidebar)
(package! dired+)
(package! dired-subtree)
#+end_src

#+begin_src emacs-lisp
(defun dired-turn-off-file-info ()
  "Turns off the file info in dired mode"
  (interactive)
  (dired-hide-details-mode t))
(add-hook! 'dired-mode-hook #'dired-turn-off-file-info)

(map! :map dired-mode-map
      :leader
      :desc "toggle dired file info"
      :n "t d" #'dired-hide-details-mode)
#+end_src

** Adding standard vim functionality
I don't remember why I wrote this line in the first place but it seems useful for later
#+begin_src emacs-lisp
(defun smart-open-line-above ()
  "Insert an empty line above the current line.
Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))
#+end_src

*** Keybindings
**** Tab as fold toggling
When available, I really like to use tab as a quick way to toggle folds.
#+begin_src emacs-lisp
(map! :n "TAB" #'+fold/toggle)
#+end_src

** Managing files
*** Sidebar file explorer

Import a simpler sidebar package for when it's needed.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! dired-sidebar)
#+end_src

Dired is just so useful that I can't really justify using treemacs. Especially since treemacs has this annoying habit of not saving the location of my cursor so I have to start at the top every time...
#+begin_src emacs-lisp
(map! :n "C-n" #'dired-sidebar-toggle-sidebar)
(map! :n "M-n" #'+treemacs/toggle)
#+end_src

#+begin_src emacs-lisp :tangle no
(map! :n "C-n" #'+treemacs/toggle)
(map! :n "M-n" #'dired-sidebar-toggle-sidebar)
#+end_src

Make it so that treemacs closes itself when selected no matter which button I press.
#+begin_src emacs-lisp
(map! :map 'treemacs-mode-map
      :ng "M-n" #'+treemacs/toggle
      :ng "C-n" #'+treemacs/toggle)
#+end_src

**** Settings for sidebars
When a directory contains nothing but a single other directory, this collapses them into a single action to open and close. In treemacs I'm not making new files very often so this option makes sense.
The number represents the number of recursive layers it's allowed. Don't make it too big otherwise things could freeze up.
#+begin_src emacs-lisp
(setq treemacs-collapse-dirs 5)
#+end_src

*** Projectile
#+begin_src emacs-lisp
(after! projectile
  (setq projectile-track-known-projects-automatically nil))
#+end_src

*** Tree viewer
This allows you to see all the recursive files in the current tree hierarchy (similar to the ~tree~ command).
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! dirtree)
(package! ztree)
(package! dir-treeview)
#+end_src

*** Buffer handling
**** Perspectives
Currently doom emacs is using ~persp-mode~ which is a fork of ~perspective~. This section is for setting the variables that are related to those modes.

#+begin_src emacs-lisp
(setq persp-sort 'created)
#+end_src

**** Tab bar mode
A tab bar for emacs. It works quite well except it reads from global buffers instead of perspective restricted buffers so I have it turned off for now.
#+begin_src emacs-lisp no
(setq tab-bar-show t)
(setq tab-bar-tab-name-function #'tab-bar-tab-name-current)
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right tab-bar-format-global))
(set-face-attribute 'tab-bar nil :inherit 'tab-bar-tab :foreground nil :background nil)
(map! :n "M->" #'tab-next
      :n "M-<" #'tab-previous)
#+end_src

Add the menu button to the tab bar so it can be accessed once in a while without taking up space.
#+begin_src emacs-lisp
(defun tab-bar-format-menu-bar-lambda ()
  "Produce the Menu button for the tab bar that shows the menu bar."
  '((menu-bar menu-item (propertize " λ" 'face 'doom-modeline-evil-emacs-state)
     tab-bar-menu-bar :help "Menu Bar")))
(add-to-list 'tab-bar-format #'tab-bar-format-menu-bar-lambda)
#+end_src

Add global keybinding labeling so tabs are easier to find
#+begin_src emacs-lisp
(which-key-add-key-based-replacements "C-x t" "tabs")
#+end_src

Make tab functions accessible from the doom-leader menu as well.
#+begin_src emacs-lisp
(map! :leader :desc "Tabs" "T" tab-prefix-map)
#+end_src

*** Window zooming
One thing I really like about tmux is the ability to zoom in on windows without destroying my whole windowing setup. This package adds that same functionality to emacs.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! zoom-window)
#+end_src

#+begin_src emacs-lisp
(setq zoom-window-use-persp t)

(setq zoom-window-mode-line-color "DarkGreen")
(map! :leader
      :desc "Zoom window"
      "z" #'zoom-window-zoom)
#+end_src


** General utility package settings
These aren't file or use case specific changes but instead things that can apply over many different major modes and situations.

*** Sub-word movement
#+begin_src emacs-lisp
;; Makes it so movement keys stop at camlecase sub words.
(global-subword-mode 1)
#+end_src

*** Case insensitive search
=case-fold-search= is a variable that turns case sensitivity on and off. It is set per buffer. Since I like case sensitivity, I'm setting the default value so that new buffers use case sensitive searches.
#+begin_src emacs-lisp
;; Make searches case sensitive
(setq-default case-fold-search nil)
#+end_src

*** Key discovery
**** Which key
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! discover-my-major)
#+end_src

#+begin_src emacs-lisp
(map! :n "g /"   #'which-key-show-top-level
      :n "g C-/" #'which-key-show-full-major-mode
      :n "g ?"   #'which-key-show-full-major-mode
      :n "g M-/" #'which-key-show-minor-mode-keymap)
(setq which-key-idle-delay 0.5)
#+end_src

**** Embark
Embark is a package that allows you to search through key bindings and is a good supplement to which-key.

In order to use embark, we first need to add a dependency: marginalia.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! marginalia)
#+end_src

Then it just needs to be turned on. Since marginalia is fairly light, this (hopefully) shouldn't impact startup times.
#+begin_src emacs-lisp
(marginalia-mode)
#+end_src

Then for the main package itself, embark.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! embark)
#+end_src

Once embark is installed, there are some key-bindings that should be set. The first of which is replacing the describe bindings function because that one isn't the most helpful. However, I want to keep it around since once in a while it may prove useful.
#+begin_src emacs-lisp
(map! :map help-map
      "b b" 'embark-bindings
      "b B" 'describe-bindings)
#+end_src

*** Write good mode
#+begin_src emacs-lisp
(remove-hook! (org-mode markdown-mode rst-mode asciidoc-mode latex-mode) #'writegood-mode)
(add-hook 'writegood-mode-hook 'writegood-passive-voice-turn-off)
(map! :leader
      :desc "Write good mode"
      "t W" #'writegood-mode)
#+end_src

*** Flycheck mode
#+begin_src emacs-lisp
;; Disable flycheck mode on load. Can be re-enabled in a buffer with SPC t f
(remove-hook! (doom-first-buffer) #'global-flycheck-mode)
#+end_src

*** Evil mode
**** Evil settings
#+begin_src emacs-lisp
;; Make undo revert smaller sections of text instead of all text
;; added while in insert mode.
(setq evil-want-fine-undo t)
#+end_src

**** Evil snipe mode
***** Snipe mode off by default
I get really annoyed by snipe mode since I often use 's' for deleting text. Therefore I use the workaround below to turn off evil snipe mode by default since I really don't want it.
#+begin_src emacs-lisp
; Remove default snipe mode
(remove-hook! (doom-first-input) 'evil-snipe-mode)
; There can be problems between snipe mode and magit mode.
(add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
#+end_src

***** Settings
Some settings for when snipe mode is on.
#+begin_src emacs-lisp
(setq evil-snipe-scope 'whole-visible
      evil-snipe-repeat-scope 'whole-visible)
#+end_src

***** New keybinding
This allows you to toggle evil snipe mode on and off (though it's still off by default)
#+begin_src emacs-lisp
(defun toggle-and-activate-evil-snipe-mode ()
  "Toggles evil-snipe-mode on and off then activates the
mode map since otherwise it requires forcing the normal mode state to be activated."
  (interactive)
  (evil-snipe-local-mode)
  (evil-force-normal-state))

(map! :leader
      :desc "Evil snipe mode"
      "t S" #'toggle-and-activate-evil-snipe-mode)
#+end_src

*** Snippets
Yas snippets are a nice package for inserting snippets into code.

Turning off the trigger in field for now since it was giving me undesired behavior. Maybe when I learn to use it better then it will come back into the config.
#+begin_src emacs-lisp :tangle no
(setq yas-triggers-in-field t)
#+end_src

*** VLF (Very Large Files)
VLF if a package for lazy loading enormous files that would normally take forever to load. The package needs to be first added but disabled so that it doesn't hamper load times. This formula was pulled from [[https://tecosaur.github.io/emacs-config/config.html#very-large-files][this]] legendary config.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; [[file:~/.config/doom/config.org::*Very large files][Very large files:1]]
(package! vlf :recipe (:host github :repo "m00natic/vlfi"))
#+end_src

Then setup the package later.
#+begin_src emacs-lisp
(use-package! vlf-setup
  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf)
#+end_src

*** Colored info
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! info-colors)
#+end_src

#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))
(add-hook 'info-selection-hook 'info-colors-fontify-node)
#+end_src

*** R data frames
This allows emacs to handle R style data frames. This makes some data handling easier in various files.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! ess-view)
#+end_src

*** Dictionary
#+begin_src emacs-lisp
;; Set the correct dictionary for spell check.
(setq ispell-dictionary "en")
#+end_src

*** Code folding
Origami mode
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! origami)
#+end_src

#+begin_src emacs-lisp
(global-origami-mode)
#+end_src

*** Git
**** Blamer
This module adds git commit information in line with code when turned on which can be nice when working through a code base.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! blamer)
#+end_src

#+begin_src emacs-lisp
(use-package blamer
  :defer 20
  :custom
  (blamer-idle-time 0)
  (blamer-min-offset 70)
  :custom-face
  (blamer-face ((t :foreground "#7a88cf"
                   :background nil
                   :height 140
                   :italic t))))
#+end_src
**** Diff
This is a nice package for visualizing git diffs in a more standard unix way than magit.
#+begin_src elisp :tangle ../configs/.doom.d/packages.el
(package! diff-ansi :recipe (:host gitlab :repo "ideasman42/emacs-diff-ansi"))
#+end_src

** Independent or external programs
*** Discord integration
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! elcord)
#+end_src

*** Speed reading
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! spray)
#+end_src

*** Presentations
**** Key cast
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! keycast)
#+end_src

#+begin_src emacs-lisp
(use-package! keycast
  :commands keycast-mode
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key bining in the mode line."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" mode-line-keycast " ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (remove '("" mode-line-keycast " ") global-mode-string))))
  (custom-set-faces!
    ('keycast-command :inherit doom-modeline-debug :height 0.9)
    ('keycast-key :inherit custom-modified :height 1.1 :weight bold)))
#+end_src

**** Gif Screenshot
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! gif-screencast)
#+end_src

#+begin_src emacs-lisp
(use-package! gif-screencast
  :commands gif-screencast-mode
  :config
  (map! :map gif-screencast-mode-map
        :g "<f8>" #'gif-screencast-toggle-pause
        :g "<f9>" #'gif-screencast-stop)
  (setq gif-screencast-program "maim"
        gif-screencast-args '("--quality" "3" "-1" ,(string-trim-right (shell-command-to-string "xdotool getactivewindow")))
        gif-screencast-optimize-args '("--batch" "--optimize=3" "--usecolormap=/tmp/doom-color-theme"))
  (defun gif-screencast-write-colormap ()
    (f-write-text
     (replace-regexp-in-string "\n+" "\n"
                               (mapconcat (lambda (c) (if (listp (cdr c))) (cadr c)))
                               'utf-8
                               "/tmp/doom-color-theme")))
  (gif-screencast-write-colormap)
  (add-hook 'doom-load-theme-hook #'gif-screencast-write-colormap))
#+end_src

**** Command log mode
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! command-log-mode)
#+end_src

*** Kubernetes
Kubernetes is a container program that is useful for managing container networks.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! kubernetes)
(package! kubernetes-evil)
#+end_src

This is for working with kubernetes config files.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! k8s-mode)
#+end_src

And being able to work with helm is a must for kubernetes.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! kubernetes-helm)
#+end_src

** Mode/package settings
*** Guix
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! guix)
#+end_src

*** Elisp-shell
#+begin_src emacs-lisp
(setq eshell-aliases-file "~/.doom.d/.eshell-aliases")
#+end_src

**** Elisp shell aliases
#+begin_src emacs-lisp :tangle ../configs/.doom.d/.eshell-aliases
#+end_src

*** Mode line
Adds details to the emacs mode line at the bottom of the page. Although several of the values can be referenced elsewhere on a given page, seeing them there is often just convenient and it uses space that would otherwise go unused.

**** Date and time
#+begin_src emacs-lisp
;; Add useful data to the mode line.
(setq display-time-day-and-date t)
(display-time-mode 1)
#+end_src

**** Battery
For the battery, I don't want it to appear in the the mode line if there is no battery present.

Since the following functions require the battery package, I need to wrap it in ~use-package~ to make sure all the definitions are loaded.
#+begin_src emacs-lisp
(use-package! battery :config
#+end_src

Sadly, there are no default functions for finding if a battery is present so I'll start by writing my own based off of the ~battery~ function in [[https://github.com/emacs-mirror/emacs/blob/3af9e84ff59811734dcbb5d55e04e1fdb7051e77/lisp/battery.el#L219][battery.el]].
#+begin_src emacs-lisp
    (defun battery-p ()
        "returns t if a battery is present for the system and nil if one is not."
        (and battery-status-function
             battery-echo-area-format
             (string-match-p "^Power N/A"
                             (battery-format
                                     battery-echo-area-format
                                     (funcall battery-status-function)))
             t))
#+end_src

If a battery source is detected, then show the batter level in the mode bar.
#+begin_src emacs-lisp
    (unless (battery-p) (display-battery-mode 1))
#+end_src

Finally, close the battery package wrapper.
#+begin_src emacs-lisp
)
#+end_src

**** Encoding format
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8,
so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (if (and
                       ; Checking for UTF-8
                       (memq
                        (plist-get (coding-system-plist buffer-file-coding-system) :category)
                        '(coding-category-utf-8))
                       ; Checking for LF line ending
                       (not
                        (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t nil)))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

*** Web mode
#+begin_src emacs-lisp
(setq web-mode-script-padding standard-indent)
(setq web-mode-style-padding standard-indent)
(setq web-mode-block-padding standard-indent)
(setq web-mode-part-padding standard-indent)
#+end_src

*** Org mode
**** Org add-on packages
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! org-reverse-datetree)
;(package! ox-gfm) ; Causing problems with pandoc at the moment.
(package! org-ref)
(package! org-chef)
(package! org-super-agenda)
(package! org-fragtog)
(package! org-pretty-tags)
#+end_src

**** Standard Org settings
If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/org")
(setq org-archive-location "archive/%s_archive::")
#+end_src

***** Font support
In org mode I like to be able to write in different fonts and languages (such as chinese) so I'm turning on variable pitch font support. Without it, lots of text starts to overlap.
#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook #'chinese-text-support)
#+end_src

***** Babel
Several languages require LSPs or other back end code to be configured for babel to use them so they are configured here.

****** Clojure
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; Clojure related packages
(package! clojure-mode)
(package! clojure-mode-extra-font-locking)
(package! clj-refactor)
(package! cider)
#+end_src

#+begin_src emacs-lisp
(setq org-bable-clojure-backend 'cider)
#+end_src

***** Org mode keybindings
#+begin_src emacs-lisp
;; Use keybinding g b to "go back" to previous location when a link is followed.
;; Use keybinding g m to "go mark" the current location so it can be returned to later.
(map! :after org
    :map org-mode-map
    :n  "g m" #'org-mark-ring-push
    :n  "g b" #'org-mark-ring-goto
    :nv "g j" #'evil-next-visual-line
    :nv "g k" #'evil-previous-visual-line
    :nv "g J" #'org-forward-element
    :nv "g K" #'org-backward-element)
#+end_src

***** Shortcut to open org files
This shortcut opens the org directory and allows a user to select a file. If the file doesn't yet exist then it is created. This is useful when I want to open some information on something that I've been tracking but don't have another shortcut to it saved somewhere.

This first function opens up the a file with all the complications that come with opening the file including setting a correct extension if needed.
#+begin_src emacs-lisp
(setq org-default-extension ".org")
(defun org-open-org-file (file)
  "Opens an org file in the default org folder.
if no org extension is given then it will be automatically appended."
  (interactive
   (list (directory-file-name
          (read-file-name "Choose org file:" org-directory))))

  ; Check for if the file:
  ; * Already exists (and is not a directory)
  ; * Has an org extension
  ; If neither of these cases is valid then automatically append an org extension
  ; to the provided file name.
  (let ((input-file-extension (concat "." (file-name-extension file)))
        (valid-org-extension-regex-list
         (mapcar 'car
                 (seq-filter
                  (lambda (mode-pairs) (eq 'org-mode (cdr mode-pairs)))
                  auto-mode-alist))))
    (unless
        (or (and (file-exists-p file)
                 (not (file-directory-p file)))
            (and input-file-extension
                 ; check the input
                 (eval (cons 'or (mapcar (lambda (extension-regex)
                                           (string-match-p extension-regex input-file-extension))
                                         valid-org-extension-regex-list)))))
      (setq file (concat file org-default-extension)))) ; Otherwise set file to have an org extension)

  ; If, after the above checks, the file name still points to a directory, then
  ; throw an error since it can't be opened at that point.
  (if (file-directory-p file)
      (error "The provided file is a directory %s" file)
    (find-file file)
    (org-mode)))
#+end_src

This helper function contains the shared code for prompting for a file.
=TODO= Create a function for building a system path.
#+begin_src emacs-lisp
(defun prompt-org-file (&optional dir default-name)
  "Prompts the user for a file inside the specified directory. Uses defualt name when no entry is given if the name is provided."
  (unless dir (setq dir org-directory))
  (directory-file-name (read-file-name "Choose org file: " dir default-name)))
#+end_src

Finally we can create functions to each of the directories that I access most often and map them to key cords.
#+begin_src emacs-lisp
(defun org-open-file ()
  "Prompts and opens a file in the default org directory."
  (interactive)
  (org-open-org-file (prompt-org-file org-directory "notes.org")))

(defun open-work-org-file (directory default-file)
  "A condensing function for opening an org directory for work purposes"
  (org-open-org-file (prompt-org-file (concat (file-name-as-directory org-directory) (file-name-as-directory "work") (file-name-as-directory directory)) default-file)))

(defun org-open-work-note ()
  "Prompts and opens a file in the org work notes directory."
  (interactive)
  (open-work-org-file "notes" "notes.org"))

(defun org-open-project-note ()
  "Prompts and opens a file in the org work notes directory."
  (interactive)
  (open-work-org-file "projects" "project.org"))

(defun org-open-work-task ()
  "Prompts and opens a file in the org work tasks directory."
  (interactive)
  (open-work-org-file "tasks" "schedule.org"))

(defun org-open-work-wiki ()
  "Prompts and opens a file in the org work tasks directory."
  (interactive)
  (open-work-org-file "wiki" "toSort.org"))

(map! :leader
      (:prefix ("f o" . "Org files")
       :desc "Org file" "o" #'org-open-file
       (:prefix ("w" . "Work")
        :desc "Notes" "n" #'org-open-work-note
        :desc "Projects" "p" #'org-open-project-note
        :desc "Tasks" "t" #'org-open-work-task
        :desc "Wiki" "w" #'org-open-work-wiki)))
#+end_src

**** Org Roam
#+begin_src emacs-lisp
(setq org-roam-directory "~/roam")
(setq org-roam-v2-ack t)
#+end_src

**** Timers and clock
#+begin_src emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+end_src

**** Org Agenda
***** Limiting files
To set specific files as being "agenda" files, you can use =org-agenda-files= however I've found I like putting schedule markers in various files around my org setup.
#+begin_src emacs-lisp :tangle no
(setq org-agenda-files (list "~/org/work.org"
                             "~/org/todo.org"))
#+end_src

**** Pomodoro
***** Begin "after! org"
All these settings have to be made after org loads so they're wrapped in an =(after! org ...)= macro.
#+begin_src emacs-lisp
(after! org
#+end_src

***** Work length
#+begin_src emacs-lisp
(setq org-pomodoro-length 25
    org-pomodoro-short-break-length 5
    org-pomodoro-long-break-length 15)
#+end_src

***** Sounds to play
#+begin_src emacs-lisp
(setq org-pomodoro-play-sounds t
    ;; org-pomodoro-start-sound-p f
    ;; org-pomodoro-ticking-sound-p f
    org-pomodoro-killed-sound-p t
    org-pomodoro-finished-sound-p t
    org-pomodoro-short-break-sound-p t
    org-pomodoro-long-break-sound-p t)
#+end_src

***** Sounds to use
If I decide to find sound files I like more than the defaults, then I can put them here.
#+begin_src emacs-lisp :tangle no
(setq ;org-pomodoro-start-sound ()
      ;org-pomodoro-ticking-sound ()
      org-pomodoro-killed-sound ()
      org-pomodoro-finished-sound ()
      org-pomodoro-short-break-sound ()
      org-pomodoro-long-break-sound ())
#+end_src

***** End of "after! org"
#+begin_src emacs-lisp
)
#+end_src

**** Org Capture
***** Settings
#+begin_src emacs-lisp
; Set default file for newly captured notes
(after! org (setq org-default-notes-file (concat org-directory "/inbox.org")))
#+end_src

***** Org template
All of my org templates are in a separate folder in my org files repo. This is so that templates are both private from public eyes and also travel with their partnered org files. I'll probably make a separate git repo for them just so they're recorded but that's a lower priority.

Load templates from org directory.
#+begin_src emacs-lisp
(defun load-directory (dir)
  "Loads all .el files from a provided directory. If the directory doesn't exist, the function loads nothing."
  (interactive)
  (if (not (file-directory-p dir))
      (message "No directory named %s, no scripts loaded." dir)
    (let* ((load-it (lambda (f)
                      (load-file (concat (file-name-as-directory dir) f)))
                    ))
      (mapc load-it (directory-files dir nil "\\.el$")))))

(load-directory (concat (file-name-as-directory org-directory) "capture-templates"))
#+end_src

****** Example template code
Example of org capture templates and how everything is setup.
pulled from https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/config.el.
This block isn't tangled and isn't at all guaranteed to work even if it was so use it only as an example.
#+begin_src emacs-lisp :tangle no
(after! org
  (setq org-capture-templates '(
    ("t" "Todo" entry () "" :prepend t)
    ("k" "Kudos" entry () "" :prepend t)
    ("f" "Followup" entry () "" :prepend t)
    ("p" "Personal" entry () "" :prepend t)
    ("P" "Project" entry () "" :prepend t)
    ("j" "Journal" entry () "" :prepend t)
  )))
'(
  ("t" "Personal todo" entry (file+headline +org-capture-todo-file "Inbox") "* [ ] %?\n%i\n%a" :prepend t)
          ("n" "Personal notes" entry (file+headline +org-capture-notes-file "Inbox") "* %u %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry (file+olp+datetree +org-capture-journal-file)
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ;; Uses the basename from `+org-capture-todo-file',
          ;; `+org-capture-changelog-file' and `+org-capture-notes-file'.
          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {org-directory}/{+org-capture-projects-file} and store
          ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
          ;; support `:parents' to specify what headings to put them under, e.g.
          ;; :parents ("Projects")
          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry
           (function +org-capture-central-project-todo-file)
           "* TODO %?\n %i\n %a"
           :heading "Tasks"
           :prepend nil)
          ("on" "Project notes" entry
           (function +org-capture-central-project-notes-file)
           "* %U %?\n %i\n %a"
           :heading "Notes"
           :prepend t)
          ("oc" "Project changelog" entry
           (function +org-capture-central-project-changelog-file)
           "* %U %?\n %i\n %a"
           :heading "Changelog"
           :prepend t))
#+end_src

**** Org Chef
Org chef is a package for saving cooking recipes from sites like [[https://www.allrecipes.com][allrecipies]] in org mode for future reference and use.
#+begin_src emacs-lisp
(use-package! org-chef
  :commands (org-chef-insert-recipe org-chef-get-recipe-from-url))
#+end_src

*** Systemd
*** E-book reader
**** Packages
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; e-reader
(package! calibredb)
(package! nov)
#+end_src

**** Settings
#+begin_src emacs-lisp
(use-package! nov ; Novel reading
  :mode ("\\.epub\\'" . nov-mode)
  :config
  (map! :map nov-mode-map
        :n "RET" #'nov-scroll-up)
  (defun doom-modeline-segment--nov-info ()
    (concat
     " " (propertize
          (cdr (assoc 'creator nov-metadata))
          'face
          'doom-modeline-project-parent-dir)
     " " (cdr (assoc 'title nov-metadata))
     " " (propertize
          (format "%d/%d" (1+ nov-documents-index) (length nov-documents))
          'face
          'doom-modeline-info)))
  (advice-add 'nov-render-title :override #'ignore)
  (defun +nov-mode-setup ()
    (require 'visual-fill-column nil t)
    (setq-local visual-fill-column-center-text t
                visual-fill-column-width 80
                nov-text-width 80)
    (visual-fill-column-mode 1)
    (hl-line-mode -1)
    (add-to-list '+lookup-definition-functions #'+lookup/dictionary-definition)

    (setq-local mode-line-format
                `((:eval (doom-modeline-segment--workspace-name))
                  (:eval (doom-modeline-segment--window-number))
                  (:eval (doom-modeline-segment--nov-info))
                  ,(propertize " "
                               'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)
                               'display `((space :align-to
                                                 (-
                                                  (+ right right-fringe right-margin)
                                                  ,(* (let ((width (doom-modeline --font-width)))
                                                        (or (and (= width 1) 1)
                                                            (/ width (frame-char-width) 1.0)))
                                                      (string-width
                                                       (format-mode-line
                                                        (cons ""
                                                              '(:eval (doom-modeline-segment--major-mode))))))))))
                  (:eval (doom-modeline-segment--major-mode)))))

  (add-hook 'nov-mode-hook #'+nov-mode-setup))
#+end_src

*** Programming Languages
**** Open CAD
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! scad-mode)
#+end_src

**** Go mode
Go mode is a mode for writing golang code. In order to get the mode to work properly, it requires some configuration. I found instructions for setting stuff on [[https://wmanger.com/articles/go-on-doom-emacs/][this]] blog and then adding ~gopls~ and ~golangci-lint~.

**** Javascript
When working with Javascript, I want to make sure that files fit the standard that I'm working with when I save them so I want to run eslint and/or prettier.

***** Eslint
Luckily eslint is can be used through LSP mode so for now the stuff below is unneeded.

First I need to be able to run eslint from Emacs.
#+begin_src elisp :tangle no
(defun eslint-fix-file (&optional filename)
  "Run eslint --fix on FILENAME"
  (if (executable-find "eslint")
      (progn
        (unless filename (setq filename (buffer-file-name)))
        (call-process-shell-command
         (concat "eslint --fix " filename)
         nil
         "*Shell Command Output*"
         t))))
#+end_src

Then I need to be able to reload my current file after eslint has run on it.
#+begin_src elisp :tangle no
(defun eslint-current-file ()
  "Run eslint on the current file and load the result"
  (interactive)
  (if (executable-find "eslint")
      (progn
        (message "Running eslint on " (buffer-file-name))
        (eslint-fix-file (buffer-file-name))
        (revert-buffer t t))))
#+end_src

Finally I need to be able to insert that into the save hook when the javascript mode is loaded.
#+begin_src elisp :tangle no
(defun run-eslint-on-save ()
  "Adds hook to run eslint on save"
  (interactive)
  (add-hook 'after-save-hook #'eslint-current-file))

(add-hook 'js2-mode-hook #'run-eslint-on-save)
#+end_src

***** Prettier
First I need to add prettier mode so that I don't need to write it myself.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! prettier-js)
#+end_src

Then I just add it to my javascript mode.
#+begin_src elisp :tangle no
(add-hook 'js2-mode-hook #'prettier-js-mode)
#+end_src

**** Gitlab CI
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! gitlab-ci-mode)
#+end_src

**** Vimrc
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! vimrc-mode)
#+end_src

**** Graphviz
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! graphviz-dot-mode)
#+end_src

#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! systemd)
#+end_src

**** General interpreter
***** TabNine
TabNine is a general purpose autocompleter. It uses Machine learning to find what's suggested to write next.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! company-tabnine)
#+end_src

** Fun
*** XKCD
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
;; Fun stuff
(package! xkcd)
#+end_src

*** Typewriter
Makes emacs sound like a typewriter.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! selectric-mode)
#+end_src

*** Games
**** steam
A package for accessing and organizing your steam library from within emacs
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! steam)
#+end_src

**** 2048-game
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! 2048-game)
#+end_src

**** mines
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! mines)
#+end_src

**** minesweeper
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! minesweeper)
#+end_src

**** sudoku
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! sudoku)
#+end_src

**** threes
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! threes)
#+end_src

**** Pacmacs
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! pacmacs)
#+end_src

**** Wordel
Wordel is a new little game that's a fun distraction.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! wordel :recipe (:host github :repo "progfolio/wordel"))
#+end_src

*** Fireplace
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! fireplace)
#+end_src

*** Power mode!
Power mode causes the screen to shake and dust to fly with each key that's typed. A cool effect for when you're hammering out a sarcastic reply.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(package! power-mode :recipe (:host github :repo "elizagamedev/power-mode.el"))
#+end_src

** Experimental personal functions
#+begin_src emacs-lisp
(defun print-point-position ()
  "Print the position of point to the message console."
  (interactive)
  (message (number-to-string (point))))

(map! :leader
      (:prefix-map ("a" . "Additional")
        (:desc "Point's position" "p" #'print-point-position)))
;;        (:prefix-map ("a" . "test2")
;;         (:prefix ("a" . "test")
;;          :desc "a test function to see if this works" "j" #'org-journal-new-entry
         ;; :desc "Search journal entry" "s" #'org-journal-search))))
;;
#+end_src

* Fixes
Here are some config fixes for issues I'm running into.

This issue is with some hook that is causing all my actions to fail its getting really annoying. I couldn't even use magit. Well now you're gone little guy, hope you're happy.
#+begin_src emacs-lisp
(remove-hook! '(magit-mode-hook find-file-hook) #'forge-bug-reference-setup)
#+end_src

This package's git github repo recently changed and so the pinning information is wrong. I'm unpinning it for now so that things build correctly. Eventually this will get fixed and can be removed. This isn't a big risk since this package is not under active development so the no breaking changes should come any time soon.
#+begin_src emacs-lisp :tangle ../configs/.doom.d/packages.el
(unpin! dired-git-info)
#+end_src

* Auto Tangle
The below allows this file to tangle and produce the output configuration files whenever the document is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
;; End:

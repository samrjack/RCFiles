#+TITLE: Emacs config file
#+AUTHOR: Samuel Jackson
#+DESCRIPTION: This file defines all my emacs configurations for my doom emacs setup.
#+STARTUP: showall hidestars overview
#+PROPERTY: header-args :results silent :tangle no

* Packages
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)

#+END_SRC
** Directory navigation
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; directory management
(package! dired-sidebar)
(package! dired+)
(package! dired-subtree)

#+END_SRC
** Themes
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; Themes
(package! dracula-theme)
(package! theme-magic)

#+END_SRC
** File type specific modes
*** Org mode
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; Org mode related stuff
(package! org-reverse-datetree)
;(package! ox-gfm) ; Causing problems with pandoc at the moment.
(package! org-ref)
(package! org-chef)
(package! org-super-agenda)
(package! org-fragtog)
(package! org-pretty-tags)
#+END_SRC

*** Clojure
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; Clojure related packages
(package! clojure-mode)
(package! clojure-mode-extra-font-locking)
(package! clj-refactor)
(package! cider)
#+END_SRC

*** Systemd
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! systemd)
#+END_SRC

*** Vimrc
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! vimrc-mode)
#+END_SRC

*** Open CAD
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! scad-mode)
#+END_SRC

*** R dataframes
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! ess-view)
#+END_SRC

*** Graphviz
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! graphviz-dot-mode)
#+END_SRC

*** E-readers
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; e-reader
(package! calibredb)
(package! nov)
#+END_SRC

** Fun
*** XKCD
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; Fun stuff
(package! xkcd)
#+END_SRC

*** Typewriter
Makes emacs sound like a typewriter.
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! selectric-mode)
#+END_SRC

** Presentation tools
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; Presentation/showing emacs
(package! command-log-mode)
(package! gif-screencast)
(package! keycast)
#+END_SRC

** Useful Tools
*** Colored info
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! info-colors)
#+END_SRC

*** Discovery tools
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! discover-my-major)
#+END_SRC

*** Speed reading
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! spray)
#+END_SRC

*** Discord integration
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! elcord)
#+END_SRC

*** Guix
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
(package! guix)
#+END_SRC

** Broken package fixes
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/packages.el
;; Used to view VERY large files faster
(package! vlf :disable t) ; disabled on startup to not impact load time.
;; Temp fixes for gitconfig-mode bug https://github.com/hlissner/doom-emacs/issues/5667
(package! gitconfig-mode
      :recipe (:host github :repo "magit/git-modes"
             :files ("gitconfig-mode.el")))
(package! gitignore-mode
      :recipe (:host github :repo "magit/git-modes"
             :files ("gitignore-mode.el")))
#+END_SRC

* Initialization
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom!
;;; Modules to load
#+END_SRC
** Input
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :input
       chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

#+END_SRC
** Completion
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :completion
       (company +childframe); the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy               ; a search engine for love and life

#+END_SRC
** UI
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :ui
       deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       fill-column       ; a `fill-column' indicator
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing

#+END_SRC
** Editor tools
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

#+END_SRC
** Emacs
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :emacs
       (dired            ; making dired pretty [functional]
        +icon)
       electric          ; smarter, keyword-based electric-indent
       ibuffer           ; interactive buffer management
       ; undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

#+END_SRC
** Terminals
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :term
       eshell            ; the elisp shell that works everywhere
       shell             ; simple shell REPL for Emacs
       term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

#+END_SRC
** Checkers
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :checkers
       syntax            ; tasing you for every semicolon you forget
       spell             ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make

#+END_SRC
** Tools
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       (docker +lsp)
       editorconfig      ; let someone else argue about tabs vs spaces
       ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       lsp
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

#+END_SRC
** OS
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience

#+END_SRC
** Programming Languages
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :lang
       ;;agda              ; types of types of types of types...
       cc                ; C/C++/Obj-C madness
       clojure           ; java with a lisp
       common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       elixir            ; erlang done right
       elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       erlang            ; an elegant language for a more civilized age
       ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       (haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       (java +meghanada) ; the poster child for carpal tunnel syndrome
       (javascript +lsp) ; all(hope(abandon(ye(who(enter(here))))))
       julia             ; a better, faster MATLAB
       kotlin            ; a better, slicker Java(Script)
       (latex +lsp       ; writing papers in Emacs has never been so fun
              +latexmk
              +cdlatex
              +fold)
       ;;lean
       ;;factor
       ledger            ; an accounting system in Emacs
       lua               ; one-based indices? one-based indices
       (markdown +grip)  ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org +brain       ; organize your plain life in plain text
            +dragndrop
            +gnuplot
            +ipython
            +journal
            +jupyter
            +noter
            +pandoc
            +pomodoro
            +present
            +pretty
            +roam2)
       ;;php               ; perl's insecure younger brother
       plantuml          ; diagrams for confusing people more
       purescript        ; javascript, but functional
       python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest              ; Emacs as a REST client
       rst               ; ReST in peace
       (ruby +rails      ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
             +rvm
             +rbenv
             +lsp)
       rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       scala             ; java, but good
       scheme            ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web               ; the tubes
       yaml              ; JSON, but readable

#+END_SRC
** Email
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :email
       (mu4e +gmail)
       ;;notmuch
       (wanderlust +gmail)

#+END_SRC
** App
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :app
       calendar
       irc               ; how neckbeards socialize
       (rss +org)        ; emacs as an RSS reader
       twitter           ; twitter client https://twitter.com/vnought

#+END_SRC
** Config
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
       :config
       ;;literate
       (default +bindings +smartparens)
#+END_SRC
** End section
#+BEGIN_SRC elisp :tangle ../configs/.doom.d/init.el
)
#+END_SRC

* Auto Tangle
The below allows this file to tangle and produce the output configuration files whenever the document is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
;; End:

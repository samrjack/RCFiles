#+TITLE: Qutebrowser Config File
#+AUTHOR: Samuel Jackson
#+DESCRIPTION: Configuration file for getting qutebrowser to work
#+STARTUP: overview hidestars indent num
#+PROPERTY: header-args :results silent :tangle "../configs/.config/qutebrowser/config.py"

Config file for qutebrowser.
To find documentation on all settings, please see:
https://qutebrowser.org/doc/help/

* Initialization
#+begin_src python
# This file has been generated using org tangle. To modify, please see the org file.
#+end_src

These headings below allow for use with python IDEs.
#+begin_src python
# pylint: disable=C0111
from qutebrowser.config.configfiles import ConfigAPI  # noqa: F401
from qutebrowser.config.config import ConfigContainer  # noqa: F401
config: ConfigAPI = config  # noqa: F821 pylint: disable=E0602,C0103
c: ConfigContainer = c  # noqa: F821 pylint: disable=E0602,C0103
#+end_src
* Auto-config
This is here so setting changes done via the GUI are still loaded. To have GUI setting changes not loaded, pass the parameter False.
#+begin_src python
config.load_autoconfig()
#+end_src

* Individual settings
** Confirm quit
Only ask if I want to quit when I have things downloading.
#+begin_src python
c.confirm_quit = ["downloads"]
#+end_src
** Aliases
#+begin_src python
c.aliases = {
    "w": "session-save",
    "q": "close",
    "qa": "quit",
    "wq": "quit --save",
    "wqa": "quit --save",
}
#+end_src
** Backend
The backend to use as a page renderer.
#+begin_src python
c.backend = "webengine"
#+end_src

** Change log
Show the change log after every update.
#+begin_src python
c.changelog_after_upgrade = "patch"
#+end_src

** Auto saving
Saves config/cookies/ etc. automatically.
#+begin_src python
c.auto_save.interval = 15000
#+end_src

* Input
** Insert mode
When loading a new page that focuses you immediately into a text field, then enter insert mode.
#+begin_src python
c.input.insert_mode.auto_load = True
c.input.insert_mode.leave_on_load = False
#+end_src

And also turn on insert mode if you click a text field of some sort.
#+begin_src python
c.input.insert_mode.auto_enter = True
#+end_src

And when clicking outside of an editable area, turn off insert mode.
#+begin_src python
c.input.insert_mode.auto_leave = True
#+end_src

When clicking into a plugin, go into insert mode since usually they can't be operated from keyboard commands anyways.
#+begin_src python
c.input.insert_mode.plugins = True
#+end_src
** Forwarding unbound keys
If a key isn't bound to a command, it can be forwarded to the website itself (when not in insert mode) but only when that key isn't an alphanumeric key since often I hit those thinking they actually do something.
#+begin_src python
c.input.forward_unbound_keys = 'auto'
#+end_src
** Reporter
Allow the escape button to quit the crash reporter screen.
#+begin_src python
c.input.escape_quits_reporter = True
#+end_src
** Focus chain
include hyperlinks in the keyboard focus chain when tabbing around.
#+begin_src python
c.input.links_included_in_focus_chain = True
#+end_src
** Media keys
Allow media keys to be used by browser.
#+begin_src python
c.input.media_keys = True
#+end_src

** Number prefixes
Enabling number prefixes for Vi style bindings (disabling it causes emacs style behavior).
#+begin_src python
c.input.match_counts = True
#+end_src
** Override mode
Don't override the mode when changing tabs.
#+begin_src python
c.input.mode_override = None
#+end_src

** Mouse
Enable the mouse back and forward buttons.
#+begin_src python
c.input.mouse.back_forward_buttons = True
#+end_src

And don't allow a rocker gesture like is in opera.
#+begin_src python
c.input.mouse.rocker_gestures = False
#+end_src
** Timeout
Don't have a timeout for key cords being typed out.
#+begin_src python
c.input.partial_timeout = 0
#+end_src
** Spacial navigation
Allows navigating between focusable elements using the arrow keys. Don't really want that though.
#+begin_src python
c.input.spatial_navigation = False
#+end_src

* Content
** Auto play
Turn off auto play because no one wants it...
#+begin_src python
c.content.autoplay = False
#+end_src

** Plugins
Allow web pages to use plugins
#+begin_src python
c.content.plugins = True
#+end_src

** Cache
First enable HTML5 caching.
#+begin_src python :tangle no
c.content.cache.appcache = True
#+end_src

Then set a large cache so things are snappy
#+begin_src python
c.content.cache.size = 2147483647 # ~2GB
#+end_src

And allow unlimited pages to be cached.
#+begin_src python :tangle no
c.content.cache.maximum_pages = 0
#+end_src

** blocker
Enable blocking and add basic settings for it.
#+begin_src python
c.content.blocking.enabled = True
c.content.blocking.hosts.block_subdomains = True
c.content.blocking.method = "auto"
c.content.blocking.adblock.lists = [
    "https://easylist.to/easylist/easylist.txt",
    "https://easylist.to/easylist/easyprivacy.txt",
]
c.content.blocking.hosts.lists = [
    "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
]
#+end_src

This is a place to put websites that I want to allow ads on.
#+begin_src python
c.content.blocking.whitelist = []
#+end_src

This little function was originally pulled from [[https://gitlab.com/jgkamat/dotfiles/blob/master/qutebrowser/.config/qutebrowser/pyconfig/adblock-yt.py][here]] but will probably be replaced some day with a better plugin. For now, I can't complain and don't want to dive further into qutebrowser plugins.
#+begin_src python
from qutebrowser.api import interceptor

    # Youtube adblock
def filter_yt(info: interceptor.Request):
    """"""
    url = info.request_url
    if (url.host() == 'www.youtube.com' and
        url.path() == '/get_video_info' and
            '&adformat=' in url.query()):
        info.block()

interceptor.register(filter_yt)
#+end_src

** Canvas reading
Allow websites to read canvas elements. A lot of pages need this.
#+begin_src python
c.content.canvas_reading = True
#+end_src

** Cookies
Accept all cookies and store them.
#+begin_src python
c.content.cookies.accept = "all"
c.content.cookies.store = True
#+end_src
** Encoding
Use UTF-8 encoding.
#+begin_src python
c.content.default_encoding = "utf-8"
#+end_src

** Access requests
Ask for desktop capture.
#+begin_src python
c.content.desktop_capture = "ask"
#+end_src

Ask for geolocation.
#+begin_src python
c.content.geolocation = "ask"
#+end_src

Ask to store something locally.
#+begin_src python
c.content.persistent_storage = "ask"
#+end_src

Ask if there's any certificate error detected.
#+begin_src python
c.content.tls.certificate_errors = "ask"
#+end_src

Ask to disable protocol handlers.
#+begin_src python
c.content.register_protocol_handler = "ask"
#+end_src

Ask to capture audio.
#+begin_src python
c.content.media.audio_capture = "ask"
#+end_src

Ask to capture video.
#+begin_src python
c.content.media.video_capture = "ask"
c.content.media.audio_video_capture = "ask"
#+end_src

Allow websites to lock mouse pointer.
#+begin_src python
c.content.mouse_lock = "ask"
#+end_src

Disable notifications.
#+begin_src python
c.content.notifications.enabled = False
#+end_src

*** Notifications
If notifications are enabled, here are some settings for them.
#+begin_src python
c.content.notifications.show_origin = True
c.content.notifications.presenter = "auto"
#+end_src

** DNS prefetch
Prefetch DNS entries to speed up browsing.
#+begin_src python
c.content.dns_prefetch = True
#+end_src

** Frames
Frame flattening flattens all frames to become a single page. Not sure what it looks like in practice. May be worth trying at some point.
#+begin_src python :tangle no
c.content.frame_flattening = False
#+end_src

** Full screen mode
When content attempts to be fullscreen, it will just fill the browser window so I can make it as big or small as I want using my window manager. This also makes content more consumable by removing distractions while its open.
#+begin_src python
c.content.fullscreen.window = True
#+end_src

** Headers
Headers to send in requests to web pages.
#+begin_src python
c.content.headers.accept_language = "en-US,en;q=0.9"
c.content.headers.custom = {}
c.content.headers.referer = "same-domain"
#+end_src

Ask not to track.
#+begin_src python
c.content.headers.do_not_track = True
#+end_src


Set some user agent.
#+begin_src python
c.content.headers.user_agent = "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {qt_key}/{qt_version} {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}"
#+end_src

** PDFs
This allows pdfs to be controlled the same way other web content is which is super convenient for scrolling and searching!
#+begin_src python
c.content.pdfjs = True
#+end_src

** Images
Automatically load the images.
#+begin_src python
c.content.images = True
#+end_src

** Hyperlinks
Don't need to audit the hyperlinks I don't think.
#+begin_src python
c.content.hyperlink_auditing = False
#+end_src

** Javascript
Enable javascript since the web really needs it.
#+begin_src python
c.content.javascript.enabled = True
#+end_src

*** Prompts
Allow alerts and prompts.
#+begin_src python
c.content.javascript.alert = True
c.content.javascript.prompt = True
#+end_src

Don't know why this is turned off.
#+begin_src python
c.content.javascript.modal_dialog = False
#+end_src

*** Accessing the clipboard
#+begin_src python
c.content.javascript.can_access_clipboard = True
#+end_src

*** Manipulating tabs
Prevent javascript from closing tabs. May need to change this later if I want a grease monkey script to work, ut other than that I can't think of why I would want this.
#+begin_src python :tangle no
c.content.javascript.can_close_tabs = False
#+end_src

Allow opening tabs for now.
#+begin_src python
c.content.javascript.can_open_tabs_automatically = True
#+end_src

*** Logging
Log levels to use for javascript console logging messages.
#+begin_src python
c.content.javascript.log = {
    "unknown": "debug",
    "info": "debug",
    "warning": "debug",
    "error": "debug",
}
#+end_src

** Local storage
Enable support for HTML 5 local storage and Web SQL.
#+begin_src python
c.content.local_storage = True
#+end_src

** Local content
Allow local content to access stuff.
#+begin_src python
c.content.local_content_can_access_remote_urls = True
c.content.local_content_can_access_file_urls = True
#+end_src

** Mute content
Mute tabs.
#+begin_src python
c.content.mute = False
#+end_src

** Reduced motion
Don't care about motion.
#+begin_src python
c.content.prefers_reduced_motion = False
#+end_src

** Element backgrounds
Draw the background color and images also when the page is printed.
#+begin_src python
c.content.print_element_backgrounds = True
#+end_src

** Default private browsing
Turn off private browsing by default.
#+begin_src python
c.content.private_browsing = False
#+end_src

** Proxy
Which proxy you want to use.
#+begin_src python
c.content.proxy = "system"
#+end_src
#+begin_src python :tangle no
c.content.proxy_dns_requests = True
#+end_src

** NetRC
Allow use of a netrc file at ~~/.netrc~
#+begin_src python
c.content.netrc_file = None
#+end_src

** WebGL
Enable WebGL.
#+begin_src python
c.content.webgl = True
#+end_src

** quirks
Allow sites to do wierd things.
#+begin_src python
c.content.site_specific_quirks.enabled = True
c.content.site_specific_quirks.skip = ["js-string-replaceall"]
#+end_src

** Unknown schemes
How to handle unknown schemes.
#+begin_src python
c.content.unknown_url_scheme_policy = "allow-from-user-interaction"
#+end_src

** WebRTC
Which interfaces to expose via WebRTC.
#+begin_src python
c.content.webrtc_ip_handling_policy = "all-interfaces"
#+end_src

** xss auditing
Monitor load requests for cross-site scripting attempts.
#+begin_src python
c.content.xss_auditing = False
#+end_src

** Stylesheets
User's personal stylesheets.
#+begin_src python
c.content.user_stylesheets = []
#+end_src


* Editor
** Editing command
Use emacs when editing input from qutebrowser since most text editing can be done pretty easily in the browser itself. Anything that needs more complex input can probably use emacs's power.
#+begin_src python
c.editor.command = ["emacs", "+{line}:{column}", "{file}"]
#+end_src

** Encoding
Encoding to use for the editor.
#+begin_src python
c.editor.encoding = "utf-8"
#+end_src
** Remove file
Remove temporary files once finished.
#+begin_src python
c.editor.remove_file = True
#+end_src

* Session
Sessions are a group of tabs that can be saved together and loaded.
#+begin_src python
c.auto_save.session = True
c.session.default_name = "default"
c.session.lazy_restore = False
#+end_src

* Scrolling
** Smooth scrolling
Have this turned off since it was causing scrolling not to work at all...
#+begin_src python
c.scrolling.smooth = False
#+end_src

** Scroll bar
Where/how to display the scroll bar.
#+begin_src python
c.scrolling.bar = "overlay"
#+end_src

* Search
** Case sensitive
Don't ignore case while searching a page.
#+begin_src python
c.search.ignore_case = "never"
#+end_src

** Incremental
Perform an incremental search while typing the search out.
#+begin_src python
c.search.incremental = True
#+end_src

** Wrap
Wrap a search around so it goes back to the beginning after the end.
#+begin_src python
c.search.incremental = True
#+end_src

* Status bar
** Position
#+begin_src python
c.statusbar.padding = {"top": 2, "bottom": 2, "left": 0, "right": 0}
c.statusbar.position = "bottom"
c.statusbar.show = "always"

#+end_src
** Widgets
Widgets to have in the status bar. Available widgets are:
- url: Current page URL.
- scroll: Percentage of the current page position like ~10%~.
- scroll_raw: Raw percentage of the current page position like ~10~.
- history: Display an arrow when possible to go back/forward in history.
- tabs: Current active tab, e.g. ~2~.
- keypress: Display pressed keys when composing a vi command.
- progress: Progress bar for the current page loading.
- text:foo: Display the static text after the colon, ~foo~ in the example.
#+begin_src python
c.statusbar.widgets = ["keypress", "url", "scroll", "history", "tabs", "progress"]
#+end_src

* Tabs
** Mouse
Which button to declare as the "close mouse button".
#+begin_src python
c.tabs.close_mouse_button = "middle"
#+end_src

And what to do when that button is pressed on the tab bar.
#+begin_src python
c.tabs.close_mouse_button_on_bar = "new-tab"
#+end_src

And open that new tab in the foreground.
#+begin_src python
c.tabs.background = False
#+end_src

Mouse wheel should change the tab.
#+begin_src python
c.tabs.mousewheel_switching = True
#+end_src

** Favicons
Normal favicon settings.
#+begin_src python
c.tabs.favicons.show = "always"
c.tabs.favicons.scale = 1.0
#+end_src

** Focus stack
Don't have an upper limit on the focus stack size.
#+begin_src python
c.tabs.focus_stack_size = 10
#+end_src

** Indicator
Tab indicator settings. Not sure what exactly this is.
#+begin_src python
c.tabs.indicator.padding = {"top": 2, "bottom": 2, "left": 0, "right": 4}
c.tabs.indicator.width = 3
#+end_src
** Closing the last tab
When the last tab is closed, I want the start page to be shown so that I know I can safely close qutebrowser. I would just have qutebrowser itself close, however it is too slow to reopen to make it worth while.
#+begin_src python
c.tabs.last_close = "default-page"
#+end_src
** Tab size
When tabs are on the left or right, I don't want them taking up too much of the screen. The width below is how much of the width of the screen that the tabs take up.
#+begin_src python
c.tabs.width = "10%"
#+end_src

And when tabs are on top or bottom, we don't really care how wide they are.
#+begin_src python
c.tabs.max_width = -1
c.tabs.min_width = -1
#+end_src

Add padding around the text in the tab.
#+begin_src python
c.tabs.padding = {"top": 0, "bottom": 0, "left": 5, "right": 5}
#+end_src

** New Tabs
For tabs opened from within a page, open them next to the current tab and stack them by relevance.
#+begin_src python
c.tabs.new_position.related = "next"
c.tabs.new_position.stacking = True
#+end_src

Put completely new tabs at the end.
#+begin_src python
c.tabs.new_position.unrelated = "last"
#+end_src

** Pinned
Keep pinned tabs shrunk and frozen.
#+begin_src python
c.tabs.pinned.frozen = True
c.tabs.pinned.shrink = True
#+end_src

** Position
Start position for the tab bar. It can easily be moved while using qutebrowser by setting them to something else.
#+begin_src python
c.tabs.position = "top"
#+end_src
** Tab bar showing
Only show the tab bar when there is more than one tab.
#+begin_src python
c.tabs.show = "multiple"
#+end_src

And if it is set to switching, how long to show it for (in milliseconds).
#+begin_src python
c.tabs.show_switching_delay = 3000
#+end_src

** On remove
When a tab is removed, then show the last used tab. Although this can be annoying sometimes, it's often helpful.
#+begin_src python
c.tabs.select_on_remove = "last-used"
#+end_src

** Title
How to show the title in a tab.
#+begin_src python
c.tabs.title.alignment = "left"
#+end_src

*** Format
Formatted title strings have the following defined parameters:
- ~{perc}~: Percentage as a string like ~[10%]~.
- ~{perc_raw}~: Raw percentage, e.g. ~10~.
- ~{current_title}~: Title of # the current web page.
- ~{title_sep}~: The string ~" - "~ if a title is set, empty otherwise.
- ~{index}~: Index of this tab.
- ~{aligned_index}~: Index of this tab padded with spaces to have the same width.
- ~{relative_index}~: Index of this tab relative to the current tab.
- ~{id}~: Internal tab ID of this tab.
- ~{scroll_pos}~: Page scroll position.
- ~{host}~: Host of the current web page.
- ~{backend}~: Either ~webkit~ or ~webengine~
- ~{private}~: Indicates when private mode is enabled.
- ~{current_url}~: URL of the current web page.
- ~{protocol}~: Protocol (http/https/...) of the current web page.
- ~{audio}~: Indicator for audio/mute status.

#+begin_src python
c.tabs.title.format = "{audio}{aligned_index}: {current_title}"
c.tabs.title.format_pinned = "{index}"
#+end_src

** Changing tabs
Wrap around when changing tabs so I don't need to go backwards to get to the beginning.
#+begin_src python
c.tabs.wrap = True
#+end_src

Restore a tab's mode when switching back to it.
#+begin_src python
c.tabs.mode_on_change = "restore"
#+end_src

** Undo stack
I like a bigger undo stack.
#+begin_src python
c.tabs.undo_stack_size = -1
#+end_src

** Tabs as windows
Turned on if tabs should be broken out into windows. (hint: they shouldn't be...)
#+begin_src python
c.tabs.tabs_are_windows = False
#+end_src

** Tool tips
Show tool tips on tabs.
#+begin_src python
c.tabs.tooltips = True
#+end_src
* Color theme
#+begin_src python
c.colors.webpage.preferred_color_scheme = "dark"
#+end_src

#+begin_src python
# c.colors.webpage.darkmode.enabled = True
#+end_src

* Hinting
#+begin_src python
c.hints.chars = "abcdefghijklmnopqrstuvwxyz"
#+end_src

* History
#+begin_src python
c.completion.cmd_history_max_items = 10000
c.completion.use_best_match = True
#+end_src

* Downloads
** location
Ask where to save a file
#+begin_src python
c.downloads.location.prompt = True
#+end_src

Default to a directory if desired.
#+begin_src python
c.downloads.location.directory = None
#+end_src

Once a location is chosen, then remember it.
#+begin_src python
c.downloads.location.remember = True
#+end_src

But always ask for all details when saving something.
#+begin_src python
c.downloads.location.suggestion = "both"
#+end_src

** Position
Where to show downloads on the screen.
#+begin_src python
c.downloads.position = "bottom"
#+end_src
** Opening
What program to use to decide what program to use to open a downloaded file.
#+begin_src python
c.downloads.open_dispatcher = None
#+end_src

** Mixed downloading
Prevent an https site to have you download an http file.
#+begin_src python
c.downloads.prevent_mixed_content = True
#+end_src

** Removal timer
Timer to remove downloads from the screen once complete.
#+begin_src python
c.downloads.remove_finished = 300000 # 5 min
#+end_src

* Url
** Auto search
When you enter words into the url, what should be done with them if they're not a web address?
- ~naive~: Use simple/naive check.
- ~dns~: Use DNS requests (might be slow!).
- ~never~: Never search automatically.
- ~schemeless~: Always search automatically unless URL explicitly contains a scheme.
#+begin_src python
c.url.auto_search = "naive"
#+end_src

** Default page
Page that opens when you open a new tab or a new window.
#+begin_src python
c.url.default_page = "https://start.duckduckgo.com/"
#+end_src

** Increment Decrement segments
Don't really know what this does. Documentation says: "URL segments where `:navigate increment/decrement` will search for a number."
#+begin_src python
c.url.incdec_segments = ["path", "query"]
#+end_src

** Search engine
 Open base URL of the search engine if a search engine shortcut is invoked without parameters.
 #+begin_src python
c.url.open_base_url = False
 #+end_src

** Search engines
Search engines that will automatically perform searches. Left in the documentation since it makes very little sense to me right now.

#+begin_quote
Search engines which can be used via the address bar. Maps a search engine name (such as ~DEFAULT~, or ~ddg~) to a URL with a ~{}~ placeholder. The placeholder will be replaced by the search term, use ~{{~ and ~}}~ for literal ~{~/~}~ braces. The following further placeholders are defined to configure how special characters in the search terms are replaced by safe characters (called 'quoting'):
- ~{}~ and ~{semiquoted}~ quote everything except slashes; this is the most sensible choice for almost all search engines (for the search term ~slash/and&amp~ this placeholder expands to ~slash/and%26amp~).
- ~{quoted}~ quotes all characters (for ~slash/and&amp~ this placeholder expands to ~slash%2Fand%26amp~).
- ~{unquoted}~ quotes nothing (for ~slash/and&amp~ this placeholder expands to ~slash/and&amp~).
- ~{0}~ means the same as ~{}~, but can be used multiple times.

The search engine named ~DEFAULT~ is used when ~url.auto_search~ is turned on and something else than a URL was entered to be opened. Other search engines can be used by prepending the search engine name to the search term, e.g. ~:open google qutebrowser~.
#+end_quote
#+begin_src python
c.url.searchengines = {"DEFAULT": "https://duckduckgo.com/?q={}"}
#+end_src

** Start pages
Pages to open when qutebrowser first starts up.
#+begin_src python
c.url.start_pages = ["https://start.duckduckgo.com"]
#+end_src

** Yanking
Parameters to ignore when a URL is yanked.
#+begin_src python
c.url.yank_ignored_parameters = [
    "ref",
    "utm_source",
    "utm_medium",
    "utm_campaign",
    "utm_term",
    "utm_content",
]
#+end_src

* Zoom
Defaults to standard zoom.
#+begin_src python
c.zoom.default = "100%"
#+end_src

** Levels
Zoom levels available in the browser
#+begin_src python
c.zoom.levels = [
    "25%",
    "33%",
    "50%",
    "67%",
    "75%",
    "90%",
    "100%",
    "110%",
    "125%",
    "150%",
    "175%",
    "200%",
    "250%",
    "300%",
    "400%",
    "500%",
]
#+end_src

** Mouse
Divide the mouse into x pieces when zooming
#+begin_src python
c.zoom.mouse_divider = 512
#+end_src

** Text vs Frame
Determines if the zoom on the page applies to the frame or just the text.
#+begin_src python :tangle no
c.zoom.text_only = False
#+end_src

* Window
** Decorations
The thing at the top of the window.
#+begin_src python
c.window.hide_decoration = False
#+end_src

** Format
Title of each window open
#+begin_src python
c.window.title_format = "{perc}{current_title}{title_sep}qutebrowser"
#+end_src

** Transparency
Transparency settings on linux systems. Don't use transparency personally though.
#+begin_src python
c.window.transparent = False
#+end_src

* Keybindings
** Normal mode
*** Unbind old keys
#+begin_src python
config.unbind('b')
#+end_src

*** Exiting
#+begin_src python
config.bind('<Ctrl-q>', 'quit')
config.bind('ZQ', 'quit')
config.bind('ZZ', 'quit --save')
#+end_src

*** Page scrolling
#+begin_src python
# Standard scrolling
config.bind('h', 'scroll left')
config.bind('j', 'scroll down')
config.bind('k', 'scroll up')
config.bind('l', 'scroll right')

# Scrolling up
config.bind('u', 'scroll-page 0 -0.5')
config.bind('U', 'scroll-page 0 -1')
config.bind('<Ctrl-u>', 'scroll-page 0 -0.5')

#Emacs
config.bind('<Ctrl-b>', 'scroll-page 0 -1')

# Scrolling down
config.bind('d', 'scroll-page 0 0.5')
config.bind('D', 'scroll-page 0 1')
config.bind('<Ctrl-d>', 'scroll-page 0 0.5')

# Scrolling top/bottom
config.bind('gg', 'scroll-to-perc 0')
config.bind('G', 'scroll-to-perc')
#+end_src

*** Search
#+begin_src python
config.bind('/', 'set-cmd-text /')
config.bind('?', 'set-cmd-text ?')
config.bind('n', 'search-next')
config.bind('N', 'search-prev')
#+end_src

*** Open url
#+begin_src python
config.bind('o', 'set-cmd-text -s :open')
config.bind('O', 'set-cmd-text -s :open -t')
config.bind('<Ctrl-o>', 'set-cmd-text -s :open -r {url:pretty}')
config.bind('<Alt-o>', 'set-cmd-text -s :open -t -r {url:pretty}')
config.bind('<Ctrl-t>', 'open -t')
config.bind('T', 'set-cmd-text -s :open -t')
config.bind('pp', 'open -- {clipboard}')
config.bind('pP', 'open -- {primary}')
config.bind('Pp', 'open -t -- {clipboard}')
config.bind('PP', 'open -t -- {primary}')
config.bind('<Ctrl-Shift-n>', 'open -p')
#+end_src

*** Tabs
**** Navigation
First we have some bindings that come directly from vim.
#+begin_src python
config.bind('^', 'tab-focus 1')
config.bind('$', 'tab-focus -1')
config.bind('<Ctrl-^>', 'tab-focus last')
#+end_src

Next we have some bindings that that make logical sense in the context of a web browser, even if they aren't pulled directly from their text editing inspiration.
#+begin_src python
config.bind('J', 'tab-next')
config.bind('K', 'tab-prev')
#+end_src

And then finally some consistency bindings.
#+begin_src python
config.bind('<Ctrl-Tab>', 'tab-focus last')
config.bind('<Ctrl-PgDown>', 'tab-next')
config.bind('<Ctrl-PgUp>', 'tab-prev')
#+end_src

**** Shortcuts
#+begin_src python
config.bind('<Alt-1>', 'tab-focus 1')
config.bind('<Alt-2>', 'tab-focus 2')
config.bind('<Alt-3>', 'tab-focus 3')
config.bind('<Alt-4>', 'tab-focus 4')
config.bind('<Alt-5>', 'tab-focus 5')
config.bind('<Alt-6>', 'tab-focus 6')
config.bind('<Alt-7>', 'tab-focus 7')
config.bind('<Alt-8>', 'tab-focus 8')
config.bind('<Alt-9>', 'tab-focus 9')
config.bind('<Alt-0>', 'tab-focus -1')
#+end_src

**** Management
Here are some bindings for managing what tabs are open and where they exist in the tab bar.
#+begin_src python
config.bind('<', 'tab-move -')
config.bind('>', 'tab-move +')
config.bind('x', 'tab-close')
config.bind('X', 'undo')
config.bind('<Alt-p>', 'tab-pin')
#+end_src

Some other redundant bindings for convenience, these are less used but are still present for logical consistency.
#+begin_src python
config.bind('<Ctrl-Shift-t>', 'undo')
#+end_src
*** History navigation
#+begin_src python
# Open previous page
config.bind('H', 'back')
# Go to next page
config.bind('L', 'forward')

# Open next page in a new background tab
config.bind('<Ctrl-l>', 'forward --tab --bg')
# Open prevous page in a new background tab
config.bind('<Ctrl-h>', 'back --tab --bg')
#+end_src

Then here are some bindings that are more more for consistencies sake. It's nice to have options after all.
#+begin_src python

config.bind('tl', 'forward -t')
config.bind('<back>', 'back')
config.bind('<forward>', 'forward')
#+end_src

*** Link navigation
#+begin_src python
config.bind('f', 'hint all current')
config.bind('F', 'hint all tab-fg')
config.bind('<Ctrl-f>', 'hint all tab-bg')
#+end_src

*** Navigate
#+begin_src python
config.bind('{{', 'navigate prev -t')
config.bind('}}', 'navigate next -t')
config.bind('[[', 'navigate prev')
config.bind(']]', 'navigate next')
config.bind('<Ctrl-a>', 'navigate increment')
config.bind('<Ctrl-x>', 'navigate decrement')
#+end_src

Since quick navigation is useful, I've exposed the full api through ~,~. When ~Ctrl-,~ is used or the second letter is capitalized then the navigation is opened in a new tab. When the ~<Alt-,>~ is used, then the navigation is opened in a background tab for later viewing.
#+begin_src python
config.bind(',u', 'navigate up')
config.bind(',s', 'navigate strip')
config.bind(',p', 'navigate prev')
config.bind(',n', 'navigate next')
config.bind(',i', 'navigate increment')
config.bind(',d', 'navigate decrement')
config.bind(',U', 'navigate --tab up')
config.bind(',S', 'navigate --tab strip')
config.bind(',P', 'navigate --tab prev')
config.bind(',N', 'navigate --tab next')
config.bind(',I', 'navigate --tab increment')
config.bind(',D', 'navigate --tab decrement')
config.bind('<Ctrl-,>u', 'navigate --tab up')
config.bind('<Ctrl-,>s', 'navigate --tab strip')
config.bind('<Ctrl-,>p', 'navigate --tab prev')
config.bind('<Ctrl-,>n', 'navigate --tab next')
config.bind('<Ctrl-,>i', 'navigate --tab increment')
config.bind('<Ctrl-,>d', 'navigate --tab decrement')
config.bind('<Alt-,>u', 'navigate --bg up')
config.bind('<Alt-,>s', 'navigate --bg strip')
config.bind('<Alt-,>p', 'navigate --bg prev')
config.bind('<Alt-,>n', 'navigate --bg next')
config.bind('<Alt-,>i', 'navigate --bg increment')
config.bind('<Alt-,>d', 'navigate --bg decrement')
#+end_src

*** hinting
#+begin_src python
config.bind(';b', 'hint all tab-bg')
config.bind(';d', 'hint all download')
config.bind(';D', 'hint all delete')
config.bind(';f', 'hint all tab-fg')
config.bind(';h', 'hint all hover')
config.bind(';i', 'hint images')
config.bind(';I', 'hint images tab')
config.bind(';o', 'hint links fill :open {hint-url}')
config.bind(';O', 'hint links fill :open -t -r {hint-url}')
config.bind(';r', 'hint --rapid links tab-bg')
config.bind(';R', 'hint --rapid links window')
config.bind(';t', 'hint inputs')
config.bind(';y', 'hint links yank')
config.bind(';Y', 'hint links yank-primary')
config.bind('<Alt-d>', 'hint all delete')
#+end_src

*** Follow selection
Following selections is an action that can be useful when when you select a text link such as by hovering over it with hints or finding it with searches.
#+begin_src python
config.bind('<Return>', 'selection-follow')
config.bind('<Ctrl-Return>', 'selection-follow -t')
#+end_src

*** Yanking (copying)
**** Url
#+begin_src python
config.bind('yd', 'yank domain')
config.bind('yD', 'yank domain -s')
config.bind('yf', 'hint all yank')
config.bind('yp', 'yank pretty-url')
config.bind('yP', 'yank pretty-url -s')
config.bind('yt', 'yank title')
config.bind('yT', 'yank title -s')
config.bind('yy', 'yank pretty-url')
config.bind('yY', 'yank -s')
#+end_src

**** Text
Since qutebrowser doesn't automatically copy and paste to the clipboard using normal OS shortcuts, I've added both linux and macOS shortcuts here for handling text copying.
#+begin_src python
config.bind('<Ctrl-c>', 'yank selection')
config.bind('<Alt-c>', 'yank selection')
#+end_src

*** Zooming
#+begin_src python
config.bind('=', 'zoom') # resets zoom level to 100%
config.bind('+', 'zoom-in')
config.bind('-', 'zoom-out')
#+end_src

*** Quickmarks/Bookmarks
#+begin_src python
config.bind('bd', 'set-cmd-text -s :quickmark-del ')
config.bind('bl', 'set-cmd-text -s :quickmark-load')
config.bind('bs', 'set-cmd-text -s :quickmark-add {url:pretty} ')
config.bind('B', 'set-cmd-text -s :quickmark-load -t')
config.bind('m', 'quickmark-save')
config.bind('M', 'bookmark-add')
#+end_src

*** Clearing things away
#+begin_src python
config.bind('cd', 'download-clear')
config.bind('cm', 'clear-messages')
config.bind('co', 'tab-only')
config.bind('ct', 'tab-only')
#+end_src

*** Change modes
#+begin_src python
config.bind('i', 'mode-enter insert')
config.bind('I', 'mode-enter passthrough')
config.bind('v', 'mode-enter caret')
config.bind('<Ctrl-v>', 'mode-enter passthrough')
config.bind('`', 'mode-enter set_mark')
config.bind("'", 'mode-enter jump_mark')
config.bind(':', 'set-cmd-text :')
#+end_src

*** Sessions
#+begin_src python
config.bind('sd', 'set-cmd-text -s :session-delete ')
config.bind('sl', 'set-cmd-text -s :session-load ')
config.bind('sr', 'set-cmd-text -s :session-load ')
config.bind('ss', 'set-cmd-text -s :session-save -o ')
config.bind('sS', 'set-cmd-text -s :session-save -p ')
#+end_src

*** Windows
#+begin_src python
config.bind('wB', 'set-cmd-text -s :bookmark-load -w')
config.bind('wO', 'set-cmd-text :open -w {url:pretty}')
config.bind('wP', 'open -w -- {primary}')
config.bind('wb', 'set-cmd-text -s :quickmark-load -w')
config.bind('wf', 'hint all window')
config.bind('wh', 'back -w')
config.bind('wi', 'inspector')
config.bind('wl', 'forward -w')
config.bind('wo', 'set-cmd-text -s :open -w')
config.bind('wp', 'open -w -- {clipboard}')
config.bind('<Ctrl-n>', 'open -w')
#+end_src

*** Reload
#+begin_src python
config.bind('r', 'reload')
config.bind('R', 'reload -f')
config.bind('<F5>', 'reload')
config.bind('<Ctrl-F5>', 'reload -f')
config.bind('<Ctrl-r>', 'config-source')
#+end_src

*** Macros
#+begin_src python
config.bind('q', 'record-macro')
config.bind('@', 'run-macro')
#+end_src

*** g- and its options

g is an interesting key. it is an easy key to use for any shortcuts you may want to use once in a while but don't need to use often or remember. Therefore I'm just throwing all the stuff here so I can see what g options I have when I need to.
#+begin_src python
config.bind('g$', 'tab-focus -1')
config.bind('g0', 'tab-focus 1')
config.bind('gB', 'set-cmd-text -s :bookmark-load -t')
config.bind('gC', 'tab-clone')
config.bind('gO', 'set-cmd-text :open -t -r {url:pretty}')
config.bind('gU', 'navigate up -t')
config.bind('g^', 'tab-focus 1')
config.bind('ga', 'open -t')
config.bind('gb', 'set-cmd-text -s :bookmark-load')
config.bind('gd', 'download')
config.bind('gf', 'view-source')
config.bind('gl', 'tab-move -')
config.bind('gm', 'tab-move')
config.bind('go', 'set-cmd-text :open {url:pretty}')
config.bind('gr', 'tab-move +')
config.bind('gt', 'set-cmd-text -s :buffer')
config.bind('gu', 'navigate up')
#+end_src

**** Ideas about what can be done with g
g as many possible uses but currently just has random things in it. Here are a list of some ideas to add in the future:
- Rotate tab position
- increase tab size

*** Settings
#+begin_src python
config.bind('Sb', 'open qute://bookmarks#bookmarks')
config.bind('Sh', 'open qute://history')
config.bind('Sq', 'open qute://bookmarks')
config.bind('Ss', 'open qute://settings')
config.bind('<Ctrl-m>', 'messages -t')
#+end_src

*** Other functionality
#+begin_src python
config.bind('<Ctrl-s>', 'stop')
config.bind('.', 'repeat-command')
config.bind('<F11>', 'fullscreen')
config.bind('<Alt-b>', 'fullscreen')
config.bind('<Ctrl-p>', 'print')
#+end_src

** Caret mode
#+begin_src python
config.bind('$', 'move-to-end-of-line', mode='caret')
config.bind('{', 'move-to-end-of-prev-block', mode='caret')
config.bind('}', 'move-to-end-of-next-block', mode='caret')
config.bind('[', 'move-to-start-of-prev-block', mode='caret')
config.bind(']', 'move-to-start-of-next-block', mode='caret')
config.bind('b', 'move-to-prev-word', mode='caret')
config.bind('c', 'mode-enter normal', mode='caret')
config.bind('e', 'move-to-end-of-word', mode='caret')
config.bind('gg', 'move-to-start-of-document', mode='caret')
config.bind('G', 'move-to-end-of-document', mode='caret')
config.bind('h', 'move-to-prev-char', mode='caret')
config.bind('H', 'scroll left', mode='caret')
config.bind('j', 'move-to-next-line', mode='caret')
config.bind('J', 'scroll down', mode='caret')
config.bind('k', 'move-to-prev-line', mode='caret')
config.bind('K', 'scroll up', mode='caret')
config.bind('l', 'move-to-next-char', mode='caret')
config.bind('L', 'scroll right', mode='caret')
config.bind('v', 'toggle-selection', mode='caret')
config.bind('w', 'move-to-next-word', mode='caret')
config.bind('y', 'yank selection', mode='caret')
config.bind('Y', 'yank selection -s', mode='caret')
config.bind('0', 'move-to-start-of-line', mode='caret')
config.bind('<Ctrl-Space>', 'drop-selection', mode='caret')
config.bind('<Escape>', 'mode-leave', mode='caret')
config.bind('<Return>', 'yank selection', mode='caret')
config.bind('<Space>', 'toggle-selection', mode='caret')
#+end_src

** Command mode
*** Basic readline emulation
The readline package standardizes a set of keyboard shortcuts for moving around text. Those shortcuts are enabled in terminal emulators and on Macs. I quite like using them when working with normal or short pieces of text when full vim modes is too much. The basic commands are shown below.
**** Moving around
#+begin_src python
config.bind('<Ctrl-b>', 'rl-backward-char', mode='command')
config.bind('<Alt-b>', 'rl-backward-word', mode='command')
config.bind('<Ctrl-f>', 'rl-forward-char', mode='command')
config.bind('<Alt-f>', 'rl-forward-word', mode='command')
config.bind('<Ctrl-a>', 'rl-beginning-of-line', mode='command')
config.bind('<Ctrl-e>', 'rl-end-of-line', mode='command')
#+end_src

**** Deleting and pasting text
#+begin_src python
# Deleting
config.bind('<Ctrl-d>', 'rl-delete-char', mode='command')
config.bind('<Alt-d>', 'rl-kill-word', mode='command')
config.bind('<Backspace>', 'rl-backward-delete-char', mode='command')
config.bind('<Alt-Backspace>', 'rl-backward-kill-word', mode='command')
config.bind('<Ctrl-h>', 'rl-backward-delete-char', mode='command')
config.bind('<Ctrl-w>', 'rl-backward-kill-word', mode='command')
config.bind('<Ctrl-k>', 'rl-kill-line', mode='command')
config.bind('<Ctrl-u>', 'rl-unix-line-discard', mode='command')

# yanking
config.bind('<Ctrl-y>', 'rl-yank', mode='command')
config.bind('<Ctrl-h>', 'rl-backward-delete-char', mode='command')
config.bind('<Ctrl-?>', 'rl-delete-char', mode='command')
config.bind('<Ctrl-w>', 'rl-unix-word-rubout', mode='command')
#+end_src

**** History
#+begin_src python
config.bind('<Ctrl-n>', 'command-history-next', mode='command')
config.bind('<Ctrl-p>', 'command-history-prev', mode='command')
config.bind('<Up>', 'completion-item-focus --history prev', mode='command')
config.bind('<Down>', 'completion-item-focus --history next', mode='command')
#+end_src

*** Non-standard bindings
These bindings make some sense in the context of a web browser but are certainly not standardized.
#+begin_src python
config.bind('<Shift-Delete>', 'completion-item-del', mode='command')
config.bind('<Ctrl-Shift-c>', 'completion-item-yank --sel', mode='command')
config.bind('<Ctrl-Shift-tab>', 'completion-item-focus prev-category', mode='command')
config.bind('<Ctrl-tab>', 'completion-item-focus next-category', mode='command')
config.bind('<Shift-Tab>', 'completion-item-focus prev', mode='command')
config.bind('<Tab>', 'completion-item-focus next', mode='command')
config.bind('<Return>', 'command-accept', mode='command')
config.bind('<Ctrl-Return>', 'command-accept --rapid', mode='command')
config.bind('<Escape>', 'mode-leave', mode='command')
#+end_src

** Hint mode
#+begin_src python
config.bind('<Ctrl-b>', 'hint all tab-bg', mode='hint')
config.bind('<Ctrl-f>', 'hint links', mode='hint')
config.bind('<Ctrl-r>', 'hint --rapid links tab-bg', mode='hint')
config.bind('<Escape>', 'mode-leave', mode='hint')
config.bind('<Return>', 'follow-hint', mode='hint')
#+end_src

** Insert mode
When on a page that requires text to be typed (even places like google's home page) then insert mode needs to be used. Usually when clicking on a text box, insert mode is automatically started however sometimes it doesn't work as planned and needs to be entered manually. Normally in text mode, very few commands are intercepted by the web browser so I'm adding a few below for convenience.
#+begin_src python
config.bind('<Escape>', 'mode-leave', mode='insert')
config.bind('<Shift-Ins>', 'insert-text {primary}', mode='insert')
config.bind('<Ctrl-r>', 'insert-text {primary}', mode='insert')
#+end_src
*** Recreating readline
#+begin_src python
# Recreated readline bindings for insert mode
config.bind('<Ctrl-h>', 'fake-key <Backspace>', mode='insert')
config.bind('<Ctrl-a>', 'fake-key <Home>', mode='insert')
config.bind('<Ctrl-e>', 'fake-key <End>', mode='insert')
config.bind('<Ctrl-b>', 'fake-key <Left>', mode='insert')
config.bind('<Alt-b>', 'fake-key <Ctrl-Left>', mode='insert')
config.bind('<Ctrl-f>', 'fake-key <Right>', mode='insert')
config.bind('<Alt-f>', 'fake-key <Ctrl-Right>', mode='insert')
config.bind('<Ctrl-p>', 'fake-key <Up>', mode='insert')
config.bind('<Ctrl-n>', 'fake-key <Down>', mode='insert')
config.bind('<Alt-d>', 'fake-key <Ctrl-Delete>', mode='insert')
config.bind('<Ctrl-d>', 'fake-key <Delete>', mode='insert')
config.bind('<Ctrl-w>', 'fake-key <Ctrl-Backspace>', mode='insert')
config.bind('<Ctrl-u>', 'fake-key <Shift-Home><Delete>', mode='insert')
config.bind('<Ctrl-k>', 'fake-key <Shift-End><Delete>', mode='insert')
config.bind('<Ctrl-x><Ctrl-e>', 'edit-text', mode='insert')
#+end_src

** Passthrough mode
Passthrough mode is a special mode that is designed to allow you to interact with the page without qutebrowser intercepting or interpreting any of your actions for itself. This is useful on sites that need to see Ctrl signals or simply are not qute friendly.

** Prompt mode
#+begin_src python
config.bind('<Alt-b>', 'rl-backward-word', mode='prompt')
config.bind('<Alt-Backspace>', 'rl-backward-kill-word', mode='prompt')
config.bind('<Alt-d>', 'rl-kill-word', mode='prompt')
config.bind('<Alt-f>', 'rl-forward-word', mode='prompt')
config.bind('<Ctrl-?>', 'rl-delete-char', mode='prompt')
config.bind('<Ctrl-a>', 'rl-beginning-of-line', mode='prompt')
config.bind('<Ctrl-b>', 'rl-backward-char', mode='prompt')
config.bind('<Ctrl-e>', 'rl-end-of-line', mode='prompt')
config.bind('<Ctrl-f>', 'rl-forward-char', mode='prompt')
config.bind('<Ctrl-h>', 'rl-backward-delete-char', mode='prompt')
config.bind('<Ctrl-k>', 'rl-kill-line', mode='prompt')
config.bind('<Ctrl-u>', 'rl-unix-line-discard', mode='prompt')
config.bind('<Ctrl-w>', 'rl-unix-word-rubout', mode='prompt')
config.bind('<Ctrl-x>', 'prompt-open-download', mode='prompt')
config.bind('<Down>', 'prompt-item-focus next', mode='prompt')
config.bind('<Escape>', 'mode-leave', mode='prompt')
config.bind('<Return>', 'prompt-accept', mode='prompt')
config.bind('<Shift-Tab>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Tab>', 'prompt-item-focus next', mode='prompt')
config.bind('<Up>', 'prompt-item-focus prev', mode='prompt')
config.bind('<Ctrl-n>', 'prompt-accept no', mode='prompt')
config.bind('<Ctrl-y>', 'prompt-accept yes', mode='prompt')
#+end_src

** Register mode
#+begin_src python
# Bindings for register mode
config.bind('<Escape>', 'mode-leave', mode='register')
#+end_src

* Spellcheck
#+begin_src python
c.spellcheck.languages = ["en-US"]
#+end_src

* Local Variables
The below allows this file to tangle and produce the output RC file whenever the document is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
;; End:

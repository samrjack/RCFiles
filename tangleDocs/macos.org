#+TITLE: Config File
#+AUTHOR: Samuel Jackson
#+DESCRIPTION: 
#+STARTUP: overview hidestars indent
#+PROPERTY: header-args :results silent :tangle ""

* Scripts setup
Many scripts require some setup to make sure the dependencies are met. If a seciton makes its own file that shouldn't be written to by other sections, then those are not initilized here.
** programs_install.sh
Here we need to install brew and add some other package manager related packages to make sure everything installs smoothly.
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
#!/bin/bash
#TODO check if brew is already installed
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew tap buo/cask-upgrade
brew install mas
#+END_SRC

** configure_settings.sh
Just need to declare the executing program
#+BEGIN_SRC sh :tangle ../scripts/macos/configure_settings.sh
#!/bin/bash
#+END_SRC

* Aliases
Since macos uses some aliases and environment values that are different from my standard sort of linux environments, this script sets up the local shell setup files so the system runs smoothly.
#+BEGIN_SRC sh :tangle ../scripts/macos/make_aliases.sh
#!/bin/bash

echo "alias ls='ls -G -bF'"                                    >> ~/.shell_setup/aliases.local.sh
echo ""                                                        >> ~/.shell_setup/aliases.local.sh
echo "if type brew &>/dev/null; then"                          >> ~/.shell_setup/aliases.local.sh
echo "    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH" >> ~/.shell_setup/aliases.local.sh
echo ""                                                        >> ~/.shell_setup/aliases.local.sh
echo "    autoload -Uz compinit"                               >> ~/.shell_setup/aliases.local.sh
echo "    compinit"                                            >> ~/.shell_setup/aliases.local.sh
echo "fi"                                                      >> ~/.shell_setup/aliases.local.sh
#+END_SRC

* Applications
** Terminals
*** Iterm
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask iterm2
#+END_SRC

*** Alacritty
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask alacritty
#+END_SRC

** Zoom
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask zoom
#+END_SRC

** VLC
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask vlc
#+END_SRC

** Emacs
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew tap d12frosted/emacs-plus
brew install emacs-plus@28 --with-imagemagick --with-native-comp --with-dbus --with-modern-alecive-flatwoken-icon
#+END_SRC

Once emacs is installed, it should be added to the applications section.
#+BEGIN_SRC sh :tangle ../scripts/macos/configure_settings.sh
ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications
#+END_SRC

** Web Browsers
*** Chrome
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask google-chrome
#+END_SRC

*** Firefox
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask firefox
#+END_SRC

*** Qutebrowser
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask qutebrowser
#+END_SRC

Qutebrowser has some weird issue that makes it unable to run out of the cask so this command allows it to work. Don't entirely understand it but that's the way life goes sometimes. After allowing it to run, the config file is aliased to the ~.qutebrowser~ folder that macos uses instead of the ~.config/qutebrowser~ folder.
#+BEGIN_SRC sh :tangle ../scripts/macos/configure_settings.sh
sudo xattr -rd com.apple.quarantine /Applications/qutebrowser.app
ln -s ~/.config/qutebrowser/config.py ~/.qutebrowser/config.py
#+END_SRC

** Intellij
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install --cask intellij-idea-ce
#+END_SRC

* CLI tools
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install tmux
brew install wget
brew install sl
brew install ranger
brew install pass
brew install cmatrix
brew install pandoc
brew install asciidoc
brew install htop
brew install tldr
brew install jq
brew install tty-clock
#+END_SRC
** Shells
*** Bash
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install bash
brew install bash-completion
#+END_SRC
*** Zsh
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install zsh
brew install zsh-autosuggestions
brew install zsh-navigation-tools
brew install zsh-lovers
brew install zsh-syntax-highlighting
brew install zsh-completions
brew install zsh-you-should-use
#+END_SRC

There's a weird issue that causes zsh to show a warning when starting up. This fixes it.
#+BEGIN_SRC sh :tangle ../scripts/macos/configure_settings.sh
sudo chmod -R 755 /usr/local/share
#+END_SRC

* Utils
#+BEGIN_SRC sh :tangle ../scripts/macos/programs_install.sh
brew install texlive
brew install --cask 1clipboard
brew install --cask background-music
brew install --cask alfred
brew install --cask go2shell
#+END_SRC

* Full system install script
When I need to install on a whole system, I want to have a single script I can run to install basically everything and not need to worry about which scripts to run first or in what order.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
#!/bin/bash
# This file has been generated using org tangle. To modify, please see the org file.
#+END_SRC

TODO prompt to ask about installing doom and fonts. Those are both really long running processes that may not be immediately wanted.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
#+END_SRC

First we install all the packages. Partly because this is the most instensive part and partly because this ensures that any following scripts have their dependencies installed.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
./programs_install.sh
#+END_SRC

Next we install all the config files. This way they're present when things are installed. If this came later, then some of the config files may be created ahead of time which causes problems with symbolically linking to my own configs.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
../configs_install.sh
#+END_SRC

Next we need make sure macos specific aliases are present.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
./make_aliases.sh
#+END_SRC

Next comes oh-my-zsh since a clean terminal is so important.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
../oh-my-zsh_install.sh
#+END_SRC

Next comes my NPM settings.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
../npm_install.sh
#+END_SRC

Following that comes the pass plugins so I can use my password manager.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
../pass-addons_install.sh
#+END_SRC

And finally we fix correct any MacOS specific issues.
#+BEGIN_SRC sh :tangle ../scripts/macos/full_system_install.sh
./configure_settings.sh
#+END_SRC

* Local Variables
The below allows this file to tangle and produce the output RC file whenever the document is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
;; End:

#+TITLE: MacOS Setup Config File
#+AUTHOR: Samuel Jackson
#+DESCRIPTION: This file creates scripts for setting up a new Mac machine.
#+STARTUP: overview num hidestars indent
#+PROPERTY: header-args :results silent :tangle "../scripts/macos/programs_install.sh" :tangle-mode (identity #o755)

* Scripts setup
Many scripts require some setup to make sure the dependencies are met. If a section makes its own file that shouldn't be written to by other sections, then those are not initialized here.
** programs_install.sh
Here we need to install brew and add some other package manager related packages to make sure everything installs smoothly.
#+begin_src sh
#!/bin/bash
#+end_src

*** Brew
Here we need to install brew to make sure everything installs smoothly. If brew is already installed we don't reinstall it since that is a pain.
#+begin_src sh
if ! command -v brew &> /dev/null
then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    export PATH="/opt/homebrew/bin:${PATH}"
fi
#+end_src

Once brew is installed, We'll tap this repo to help with cask management.
#+begin_src sh
brew tap buo/cask-upgrade
#+end_src

*** Mac App Store
Then we add ~mas~ which is the =Mac App Store= program which is used to install app store apps from the command line.
#+begin_src sh
brew tap buo/cask-upgrade
brew install mas
sudo softwareupdate --install-rosetta
#+end_src

*** Pip
Pip is the package manager for python. It is used to install a ton of useful python utilities.
#+begin_src sh
brew install python
#+end_src

And then install poetry since it's a standard dependency manager for pip.
#+begin_src sh
pip3 install poetry
#+end_src

*** NPM
Npm is the main package manager for anything and everything javascript. Better have it installed!
#+begin_src sh
brew install npm
#+end_src

*** Xcode
Xcode is the compiler for mac apps. It takes forever to download but it's good to have installed before it's actually needed.
#+begin_src sh
mas install 497799835 # Xcode
sudo xcodebuild -license accept
#+end_src

** configure_settings.sh
Just need to declare the executing program
#+begin_src sh :tangle ../scripts/macos/configure_settings.sh
#!/bin/bash
#+end_src

* Aliases
Since macos uses some aliases and environment values that are different from my standard sort of linux environments, this script sets up the local shell setup files so the system runs smoothly.
#+begin_src sh :tangle ../scripts/macos/make_aliases.sh
#!/bin/bash

echo "# When coreutils is installed,"                          >> ~/.shell_setup/aliases.local.sh
echo "# ls does as expected, but when"                         >> ~/.shell_setup/aliases.local.sh
echo "# core utils is not present,"                            >> ~/.shell_setup/aliases.local.sh
echo "# ls uses the MacOS flag of -G"                          >> ~/.shell_setup/aliases.local.sh
echo "# instead of --color."                                   >> ~/.shell_setup/aliases.local.sh
echo "#alias ls='ls -G -bF'"                                   >> ~/.shell_setup/aliases.local.sh
echo "unalias open"                                            >> ~/.shell_setup/aliases.local.sh
echo "alias finder='open'"                                     >> ~/.shell_setup/aliases.local.sh
echo ""                                                        >> ~/.shell_setup/aliases.local.sh
echo "# if type brew &>/dev/null; then"                          >> ~/.shell_setup/aliases.local.sh
echo "#     FPATH=$(brew --prefix)/share/zsh-completions:$FPATH" >> ~/.shell_setup/aliases.local.sh
echo "# "                                                        >> ~/.shell_setup/aliases.local.sh
echo "#     autoload -Uz compinit"                               >> ~/.shell_setup/aliases.local.sh
echo "#     compinit"                                            >> ~/.shell_setup/aliases.local.sh
echo "# fi"                                                      >> ~/.shell_setup/aliases.local.sh
#+end_src

* Applications
** Terminals
*** Iterm
Iterm is the best terminal on MacOS. This (for me) is primarily because mac has the stupid options button that replaces the alt key and this is one of the only terminals that interpret option key-cords correctly instead of creating some unicode glyph. I really hate this part of MacOS...
#+begin_src sh
brew install --cask iterm2
#+end_src

*** Alacritty
The default terminal I use on all other systems.
#+begin_src sh
brew install --cask alacritty
#+end_src

** Zoom
A popular video calling service.
#+begin_src sh
brew install --cask zoom
#+end_src

** VLC
This can play anything. The interface is ugly, but if it's a video file then VLC will play it.
#+begin_src sh
brew install --cask vlc
#+end_src

** Text editors
*** Emacs
Emacs is a lisp programming environment that's better known for it's text editing capabilities.
#+begin_src sh :tangle no
brew install --cask emacs
#+end_src

The standard emacs install that brew provides uses 28 but being able to specify build flags is fantastic. See [[https://github.com/d12frosted/homebrew-emacs-plus][here]] for documentation.
#+begin_src sh
# Emacs build dependencies
brew install gcc
brew install libgccjit
brew install imagemagick
brew install mailutils
brew install dbus
brew install tree-sitter

brew tap d12frosted/emacs-plus
brew update
brew install emacs-plus@28 --with-imagemagick --with-native-comp --with-dbus --with-modern-cg433n-icon --with-mailutils --with-ctags --with-xwidgets
#+end_src

Here's the formula for installing emacs 29 which will be coming up soon.
#+begin_src sh :tangle no
brew install emacs-plus@29 --with-imagemagick --with-native-comp --with-dbus --with-modern-cg433n-icon --with-mailutils --with-ctags --with-xwidgets --with-poll
#+end_src


Once emacs is installed, it should be added to the applications section.
#+begin_src sh :tangle ../scripts/macos/configure_settings.sh
ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications
#+end_src

**** Building from source
When I want to build emacs from source to get some of those extra sweet options, here are the packages that should be installed.
#+begin_src sh :tangle no
brew install 'autoconf'
brew install 'coreutils'
brew install 'curl'
brew install 'dbus'
brew install 'expat'
brew install 'gcc'
brew install 'gmake'
brew install 'gmp'
brew install 'gnu-sed'
brew install 'gnutls'
brew install 'imagemagick'
brew install 'jansson'
brew install 'libffi'
brew install 'libgccjit'
brew install 'libiconv'
brew install 'librsvg'
brew install 'libtasn1'
brew install 'libunistring'
brew install 'libxml2'
brew install 'little-cms2'
brew install 'mailutils'
brew install 'make'
brew install 'ncurses'
brew install 'nettle'
brew install 'pkg-config'
brew install 'sqlite'
brew install 'texinfo'
brew install 'wget'
brew install 'zlib'
#+end_src

And to build emacs, I run something like the following.
#+begin_src sh :tangle no
mkdir -p ~/tmp/emacs
cd ~/tmp/emacs
wget https://ftp.gnu.org/gnu/emacs/emacs-28.2.tar.xz
cd emacs-28.2
#+end_src

Then run the configure script.
#+begin_src sh :tangle no
./configure \
  -C \
  --with-x \
  --with-xwidgets \
  --with-imagemagick \
  --with-mailutils \
  --with-gnutls \
  --with-json \
  --with-native-compilation \
  CFLAGS="-O2 -pipe -fomit-frame-pointer"
#+end_src

Then build it with a make utility.
#+begin_src sh :tangle no
gmake
#+end_src

*** Sublime-text
A popular text editor. I don't use it much but I can try it later.
#+begin_src sh
brew install sublime-text
#+end_src

*** Brackets
A popular text editor. I don't use it much but I can try it later.
#+begin_src sh
brew install brackets
#+end_src

*** Atom
A popular text editor. I don't use it much but I can try it later.
#+begin_src sh
brew install atom
#+end_src

*** Visual studio code
A popular text editor. I don't use it much but I can try it later.
#+begin_src sh
brew install visual-studio-code
#+end_src

*** Intellij
Intellij is the industry standard IDE for java and similar languages.
#+begin_src sh
brew install --cask intellij-idea-ce
#+end_src

*** Goland
An intellij-like IDE (also made by jetbrains) for working with go.
#+begin_src sh
brew install --cask goland
#+end_src

*** Webstorm
A Jetbrains product for working with javascript
#+begin_src sh
brew install --cask webstorm
#+end_src

** Web Browsers
*** Chrome
Chrome is my usual standard choice for a web browser.
#+begin_src sh
brew install --cask google-chrome
#+end_src

*** Firefox
I've always found firefox to be slower than chrome but it is more open source so I like to use it once in a while.
#+begin_src sh
brew install --cask firefox
#+end_src

*** Brave
Brave browser is a privacy focused browser with good adblocking.
#+begin_src sh
brew install --cask brave-browser
#+end_src
*** Qutebrowser
Qutebrowser is a wonderful little web browser that incorporates vim style keybindings and modal tab management. It's missing plugins and a better adblocker but I still love it! There ARE plugins that provide similar functionality in chrome/firefox that I want to explore some more, but they've never been as fully functioning and as clean to use as my dear qutebrowser.
#+begin_src sh
brew install --cask qutebrowser
#+end_src

Qutebrowser has some weird issue that makes it unable to run out of the cask so this command allows it to work. Don't entirely understand it but that's the way life goes sometimes. After allowing it to run, the config file is aliased to the ~.qutebrowser~ folder that macos uses instead of the ~.config/qutebrowser~ folder.
#+begin_src sh :tangle ../scripts/macos/configure_settings.sh
sudo xattr -rd com.apple.quarantine /Applications/qutebrowser.app
ln -s ~/.config/qutebrowser/config.py ~/.qutebrowser/config.py
#+end_src

** Slack
Slack is a very popular tool for business messaging and communication.
#+begin_src sh
brew install --cask slack
#+end_src

** Gimp
Best open source image editor!
#+begin_src sh
brew install --cask gimp
#+end_src

** PGAdmin
A good gui for accessing postgres tables.
#+begin_src sh
brew install --cask pgadmin4
#+end_src

** Postman
Postman is an application for making http api requests to services.
#+begin_src sh
brew install --cask postman
#+end_src
** Spotify
Want to listen to some tunes.
#+begin_src sh
brew install --cask spotify
#+end_src

** Karabiner
Karabiner is a program for remapping key functionality on the mac. Awesome for getting keyboards to behave the way you want.
#+begin_src sh
brew install --cask karabiner-elements
#+end_src

** Flameshot
A cool tool for taking screenshots then editing them.
#+begin_src sh
brew install --cask flameshot
#+end_src
** Anki
The best spaced repitition program yet created.
#+begin_src sh
brew install --cask anki
#+end_src

** Musescore
Musescore 4 is an open source music score writing software. There's a great video about its creation [[https://www.youtube.com/watch?v=Qct6LKbneKQ][here]]. Mostly just installing to look at it eventually; after all, who needs hard drive space?
#+begin_src sh
brew install --cask musescore
#+end_src

** Locust
This is a load testing program for hitting endpoints.
#+begin_src sh
brew intsall locust
#+end_src

* CLI tools
** Shells
Anything that deals with shells or working within the terminal.
*** Bash
#+begin_src sh
brew install bash
brew install bash-completion
brew install bash-language-server
#+end_src
*** Zsh
#+begin_src sh
brew install zsh
brew install zsh-autosuggestions
brew install zsh-navigation-tools
brew install zsh-lovers
brew install zsh-syntax-highlighting
brew install zsh-completions
brew install zsh-you-should-use
#+end_src

There's a weird issue that causes zsh to show a warning when starting up. This fixes it.
#+begin_src sh :tangle ../scripts/macos/configure_settings.sh
sudo chmod -R 755 /usr/local/share
#+end_src

*** tmux
Tmux is a terminal multiplexer and session daemon. It works really well for having your own set of desktops in the terminal itself.
#+begin_src sh
brew install tmux
#+end_src

** CLI interface functions
These functions are simple cli interfaces that follow the unix standard, and as such are useful for piping things to do processing.
*** Utils
These are packages that add functionality or utility functions that are often used in basic shell commands to chain things together. Glue code basically.
**** Core utils
The standard GNU utilities. Although these are provided with MacOS already, the ones included here should have the standard option flags which will make my life easier (for the most part...).
#+begin_src sh
brew install coreutils
#+end_src

**** More utils
Other useful utils for working with command line. Namely ~vipe~ which allows you to use ~$EDITOR~ in middle of a pipeline.
#+begin_src sh
brew install moreutils
#+end_src

**** Other individual tools
Besides from the utils packages, these are some useful alternative versions of common built in commands.
***** Gawk
GNU version of AWK. Turned off so as to not interfere with AWK itself for now. Not sure why it's not included with the name ~gawk~.
#+begin_src sh
brew unlink awk
brew install gawk
#+end_src

***** Mawk
Another cool awk interpreter.
#+begin_src sh
brew install mawk
#+end_src
***** Bingrep
A grep utility for searching through binary files.
#+begin_src sh
brew install bingrep
#+end_src
***** Grep
The GNU version of grep. Has PCRE lookaheads and what not.
#+begin_src sh
brew install grep
#+end_src

***** Ripgrep
A fast grep tool for finding files. Used in emacs.
#+begin_src sh
brew install ripgrep
brew install ripgrep-all
#+end_src

***** Silver searcher
Another fast grep tool for finding files. Also used in emacs.
#+begin_src sh
brew install the_silver_searcher
#+end_src

*** awscli
A CLI tool for accessing and using AWS resources.
#+begin_src sh
brew install awscli
#+end_src

Along with this, usually when using the aws CLI you also need to authenticate and hence use this:
#+begin_src sh
brew install aws-iam-authenticator
#+end_src

*** wget
Wget is a web downloader similar to curl. It gets used instead of curl in a couple of places so it's good to have installed.
#+begin_src sh
brew install wget
#+end_src

*** HttPie
An alternative to curl and wget.
#+begin_src sh
brew install httpie
#+end_src

*** fd
Fd is a find-like utility.
#+begin_src sh
brew install fd
#+end_src

*** jq/yq
Jq is a cli tool for JSON reading and manipulation.
#+begin_src sh
brew install jq
#+end_src

Yq is jq's yaml equivalent.
#+begin_src sh
brew install yq
#+end_src

*** Cmake
Used for vterm in emacs.
#+begin_src sh
brew install cmake
#+end_src

*** Z
A smart ~cd~.
#+begin_src sh
brew install z
#+end_src

** CLI programs
These are full on programs in the CLI that aren't meant to be paired with other tools in a chain.
*** sl
Sl is the steam locomotive program. Who doesn't like trains?
#+begin_src sh
brew install sl
#+end_src

*** ranger
Ranger is a terminal file manager. Nice to use when you need to manipulate files.
#+begin_src sh
brew install ranger
#+end_src

*** cmatrix
Cmatrix allows you to enter the (c)Matrix!
#+begin_src sh
brew install cmatrix
#+end_src

*** htop
Htop is a terminal based process viewer and manager.
#+begin_src sh
brew install htop
#+end_src

*** tldr
Tldr is a program that provides example usage for several common cli tools out there.
#+begin_src sh
brew install tldr
#+end_src

*** Ledger
Ledger is a CLI program for double-entry accounting. Neat!
#+begin_src sh
brew install ledger
#+end_src

*** tty-clock
Tty-clock is a... clock, in the... tty.
#+begin_src sh
brew install tty-clock
#+end_src

*** Nmap
A useful network scanner.
#+begin_src sh
brew install nmap
#+end_src

*** k9 interface
Cli tool for interfacing with kubernetes
#+begin_src sh
brew install k9s
#+end_src

*** RabbitMQ
A local viewer for the [[https://www.rabbitmq.com/][Rabbit MQ]] messaging system.
#+begin_src sh
brew install rabbitmq
#+end_src

*** pass
Pass is an open source package manager.
#+begin_src sh
brew install pass
#+end_src

*** Pgcli
A tool for accessing postgresSQL databases from command line. Has some pretty neat auto-completion and syntax highlighting!
#+begin_src sh
brew install pgcli
#+end_src

*** Hstr
A history manager that provides suggestions of previous commands.
#+begin_src sh
brew install hstr
#+end_src

*** Git simulator
This little tool is helpful for showing how git's commands work. Info [[   https://initialcommit.com/blog/git-sim][here]].

First we need to install dependencies.
#+begin_src sh
brew install py3cairo ffmpeg pango scipy
pip3 install manim
#+end_src

Then install git-sim through pip.
#+begin_src sh
pip3 install git-sim
#+end_src

*** Difftastic
A tool for viewing syntax-aware diffs.
#+begin_src sh
brew install difftastic
#+end_src

*** Speedtest cli
When dealing with internet issues, it helps to be able to run a speed test from the command line.
#+begin_src sh
brew install speedtest_cli
#+end_src

*** Youtube-dl
This program helps to download youtube videos from the command line.
#+begin_src sh
brew install youtube-dl
#+end_src
** info dumpers
These help provide info about the system they're running on.
*** onefetch
Onefetch is a tool that summarizes a git repository in a clean way to give you an idea of what it contains and by whom.
#+begin_src sh
brew install onefetch
#+end_src

*** neofetch
Neofetch is a tool that summarizes a system's resources in a nice little print out.
#+begin_src sh
brew install neofetch
#+end_src

*** Cloc
Cloc is a program that counts lines of code in files.
#+begin_src sh
brew install cloc
#+end_src

** Converters
These programs run conversions.
*** pdftk
PDFtk is a utility function that allows you to combine PDFs together into a single PDF document.
#+begin_src sh
brew install pdftk-java
#+end_src

To use PDFtk, you simply need to run a command like the following
#+begin_src sh :tangle no
pdftk dir_of_files/* cat output "combined.pdf" # cat stands for for concatenate
#+end_src

*** ffmpeg
Ffmpeg is a super powerful cli video and photo modifier.

There's actually a more powerful version available through its own tap.
#+begin_src sh
brew tap homebrew-ffmpeg/ffmpeg
brew upfdate
#+end_src

There are some extra dependencies that need to be installed to allow for its full functionality to be available.
#+begin_src sh
brew install chromaprint

brew tap amiaopensource/amiaos
brew install amiaopensource/amiaos/decklinksdk

brew tap lescanauxdiscrets/tap
brew install lescanauxdiscrets/tap/zvbi
#+end_src

Finally install the new ffmpeg build.
#+begin_src sh
brew uninstall ffmpeg # Uninstall in case it was previously installed
brew install homebrew-ffmpeg/ffmpeg/ffmpeg $(brew options homebrew-ffmpeg/ffmpeg/ffmpeg --compact)
#+end_src

*** pandoc
Pandoc is a converter that transpiles several different kinds of docs such as markdown into latex or Org into latex or wikix into latex... I mostly use it for turning org files into pdfs or wiki pages.
#+begin_src sh
brew install pandoc
#+end_src

*** asciidoc
Converts asciidoc files into DocBook or HTML.
#+begin_src sh
brew install asciidoc
#+end_src

*** Sops
Tool for working with encrypted files and secrets.
#+begin_src sh
brew install sops
#+end_src

* Utilities
** Postgresql
#+begin_src sh
brew install postgresql
brew install golang-migrate
brew install sql-language-server
#+end_src

** Docker
Docker is a tool for creating VMs to run software. Needed at many software companies.
#+begin_src sh
brew install --cask docker
#+end_src

** Lastpass
Lastpass is a tool for password management.
#+begin_src sh
brew install --cask lastpass
brew install lastpass-cli
#+end_src

** 1clipboard
1clipboard manages your clipboard history and access what you've copied before.
#+begin_src sh
brew install --cask 1clipboard
#+end_src

** Background-music
Background music is a nice program for managing the audio streams on your computer.
#+begin_src sh
brew install --cask background-music
#+end_src

** Amphetamine
Amphetamine is a program that keeps the computer awake without interaction from the user. Super convenient when installing programs or just watching something.
#+begin_src sh
mas install 937984704 # Amphetamine
#+end_src

Also install caffeine as backup
#+begin_src sh
brew install caffeine
#+end_src

** Dropbox
Dropbox is a file syncing service. I use it to manage my database of org files.
#+begin_src sh
brew install --cask dropbox
#+end_src

** Alphred
Alphred is a more customizable spotlight.
#+begin_src sh
brew install --cask alfred
#+end_src

** Go2shell
Allows you to open up a terminal in a particular folder from Finder.
#+begin_src sh
brew install --cask go2shell
#+end_src
** Spectacle
A tool for window snap management.
#+begin_src sh
brew install --cask spectacle
#+end_src
** VPN
*** TunnelBlick
Tunnel blick is a free OpenVPN client for MacOS. [[https://www.tunnelblick.net][homepage]].
#+begin_src sh
brew install --cask tunnelblick
#+end_src

*** AWS VPN
AWS VPN client allows you to connect to the AWS vpn which is
#+begin_src sh
brew install --cask --cask aws-vpn-client

#+end_src

** GNU plot
GNU plot is a tool for creating graphs and other visuals. Used by emacs
#+begin_src sh
brew install gnuplot
#+end_src
** Graphviz
A tool for converting certain types of files into graphics.
#+begin_src sh
brew install graphviz
#+end_src

** Kubernetes
Kubernetes command line interface
#+begin_src sh
brew install kubernetes-cli
#+end_src

*** Minikube
Runs a kubernetes cluster locally.
#+begin_src sh
brew install minikube
#+end_src

Then install the hyperkit drivers so minikube can use more memory.
#+begin_src sh
brew install hyperkit
#+end_src

To use hyperkit, start minikube as follows:
#+begin_src sh :tangle no
minikube start --memory='4g' --cpus='2' --driver='hyperkit'
#+end_src


*** Helm
To use kubernetes, we also need to have helm installed. And add some of the more common helm plugins for good measure.
#+begin_src sh
brew install helm
helm plugin install https://github.com/jkroepke/helm-secrets --version v3.11.0
helm plugin install https://github.com/rimusz/helm-tiller
#+end_src

*** EKS
Then this tool is used to create clusters on Amazon EKS. It could go up with the AWS CLI, but it's more related to kubernetes clusters.
#+begin_src sh
brew install eksctl
#+end_src

*** Skaffold
Skaffold is a program for running persistent updating local testing in kubernetes.
#+begin_src sh
brew install skaffold
#+end_src

*** Kustomize
Kustomize is a tool to help build kubernetes applications.
#+begin_src sh
brew install kustomize
#+end_src

** Localstack
Local stack is an AWS emulation program that allows you to run and test AWS integration code from your local computer. [[https://docs.localstack.cloud/overview/][Link to the docs]].
#+begin_src sh
pip3 install --user localstack
pip3 install --user aws-local
#+end_src

** Aspell
A good spellchecking backend. Used by emacs.
#+begin_src sh
brew install aspell
#+end_src

** Android
Needed to use adb and important tools for working with android devices.
#+begin_src sh
brew install android-sdk
brew install android-platform-tools
#+end_src

Here are other tools for working with android devices.
#+begin_src sh
brew install lsusb
#+end_src

** Editor config
Another package for Emacs.
#+begin_src sh
brew install editorconfig
#+end_src
** Direnv tool
Load/unload environment variables based on $PWD.
#+begin_src sh
brew install direnv
#+end_src

** Programming languages
*** Android
Sometimes being able to open up and work on android apps is useful. Here I'll install android studio so that it is available when needed.
#+begin_src sh
brew install --cask android-studio
#+end_src

*** Go
A clean simple little language. See the [[https://go.dev][golang]] website.
#+begin_src sh
brew install go
#+end_src

Go's language server for editors like emacs or vs-code.
#+begin_src sh
brew install gopls
#+end_src

And the linter that goes along with it.
#+begin_src sh
brew install golangci-lint
#+end_src
*** C
Always have to be able to compile some quick C code!
#+begin_src sh
brew install gcc
brew install ccls
#+end_src
*** Java
Installing java to for industrial purposes.
#+begin_src sh
brew install java
brew install jdtls
#+end_src

For formatting java code in editors.
#+begin_src sh
brew install clang-format
#+end_src

*** Kotlin
Kotlin is a JVM language with lots of nice features. Essentially what you would hope java to be.
#+begin_src sh
brew install kotlin
#+end_src

Pre-install the kotlin LSP server.
#+begin_src sh
brew install kotlin-language-server
#+end_src

Kotlin has a linter too.
#+begin_src sh
brew install ktlint
#+end_src

*** Scala
The second most functional JVM language.
#+begin_src sh
brew install scala
brew install metals
#+end_src

*** Clojure
Clojure is the lisp-y jvm language.
#+begin_src sh
brew install clojure
#+end_src

And get that LSP!
#+begin_src sh
brew install clojure-lsp
#+end_src

And then this is a formatter for clojure and clojurescript.
#+begin_src sh
brew install --cask zprint
#+end_src

*** Clojurescript
clojurescript is for writing clojure for the web.
#+begin_src sh
brew install clojurescript
#+end_src

*** Python
Python should be installed above for pip, but marking it here too to be sure.
#+begin_src sh
brew install python
#+end_src

In Emacs, python uses a language formatter called black.
#+begin_src sh
brew install black
#+end_src

When using python, being able to use environments is a must due to the awkward package management.
#+begin_src sh
brew install pyenv
#+end_src

and finally an LSP server for making this easier to use.
#+begin_src sh
pip3 install pyright
#+end_src

*** Haskell
Install haskell compiler and its language server. Haskell is useful for scripting some things.
#+begin_src sh
brew install ghc
brew install haskell-language-server
brew install cabal-install
brew install haskell-stack
#+end_src

*** Elm
Haskell for the web.
#+begin_src sh
brew install elm
brew install elm-format
#+end_src
*** Common Lisp
Common lisp is one of the most popular flavors of lisp in the wild. I Need it installed for use with emacs.
#+begin_src sh
brew install sbcl
#+end_src

*** Racket
Racket is a popular lisp language.
#+begin_src sh
brew install --cask racket
#+end_src

*** Scheme
There isn't really any one single scheme, but they all are lisps so close enough.
#+begin_src sh
brew install gambit-scheme
brew install sagittarius-scheme
#+end_src

*** Rust
Rust is up-and-coming so may as well have all the stuff already available.

First install the compiler and a completion package for it.
#+begin_src sh
brew install rust
brew install rustc-completion
#+end_src

Then install the rust toolchain.
#+begin_src sh
brew install rustup-init
#+end_src

And then finally an analyzer to measure code performance.
#+begin_src sh
brew install rust-analyzer
#+end_src

*** Erlang
#+begin_src sh
brew install erlang
brew install wrangler
#+end_src
*** Elixer
An erlang for the web.
#+begin_src sh
brew install elixir
brew install elixir-ls
#+end_src

*** Ocaml
An interesting functional programming language.
#+begin_src sh
brew install ocaml
#+end_src
*** Html
Great set of HTML tools.
#+begin_src sh
brew install tidy-html5
#+end_src

*** LaTeX
The whole latex environment. It's a big package but there should be enough space on most machines that it won't matter.
#+begin_src sh
brew install texlive
#+end_src

*** Shell
Various tools for making shell scripts.
#+begin_src sh
brew install shfmt
brew install shellcheck
#+end_src

*** Markdown
Grip is nice markdown viewer so you can see what you've written before publishing.
#+begin_src sh
brew install grip
#+end_src

Prettier is a tool for cleaning up markdown files.
#+begin_src sh
brew install prettier
#+end_src

This is an lsp tool for markdown (and LaTeX, but I don't use that as much).
#+begin_src sh
brew install marksman
brew install ltex-ls
#+end_src

*** Terraform
A tool for standardizing web architecture.
#+begin_src sh
brew install terraform
brew install terraform-docs
#+end_src

The most common LSP.
#+begin_src sh
brew install terraform-ls
#+end_src

And this tool helps convert existing architecture into terraform files.
#+begin_src sh
brew install terraformer
#+end_src

*** Ansible
A tool to automate deployment, configuration, and upgrading remote servers.
#+begin_src sh
brew install ansible
brew install ansible-language-server
#+end_src
*** Web

Nvm for managing node versions.
#+begin_src sh
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
#+end_src

Once npm is installed, it can be used to install packages useful for web development.
#+begin_src sh
npm -g install js-beautify
npm -g install stylelint
#+end_src

*** Other
A place for other programming language things like LSPs that aren't worth their own section.

LSP for YAML.
#+begin_src sh
brew install yaml-language-server
#+end_src
* Full system install script
When I need to install on a whole system, I want to have a single script I can run to install basically everything and not need to worry about which scripts to run first or in what order.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
#!/bin/bash
# This file has been generated using org tangle. To modify, please see the org file.
#+end_src

TODO prompt to ask about installing doom and fonts. Those are both really long running processes that may not be immediately wanted.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
#+end_src

First we install all the packages. Partly because this is the most intensive part and partly because this ensures that any following scripts have their dependencies installed.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
./programs_install.sh
#+end_src

Next we install all the config files. This way they're present when things are installed. If this came later, then some of the config files may be created ahead of time which causes problems with symbolically linking to my own configs.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
../configs_install.sh
#+end_src

Next we need make sure macos specific aliases are present.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
./make_aliases.sh
#+end_src

Next comes oh-my-zsh since a clean terminal is so important.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
../oh-my-zsh_install.sh
#+end_src

Next comes my NPM settings.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
../npm_install.sh
#+end_src

Following that comes the pass plugins so I can use my password manager.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
../pass-addons_install.sh
#+end_src

And finally we fix correct any MacOS specific issues.
#+begin_src sh :tangle ../scripts/macos/full_system_install.sh
./configure_settings.sh
#+end_src

* Local Variables
The below allows this file to tangle and produce the output RC file whenever the document is saved.

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)))
;; End:
